
JohanEddyChocueOtero-0818516-final-exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd8  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a68  08005a68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a70  08005a70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000070  08005ae8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  08005ae8  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f363  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c8  00000000  00000000  0002f446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00031810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a89  00000000  00000000  000325d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002759e  00000000  00000000  00033059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116a7  00000000  00000000  0005a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed283  00000000  00000000  0006bc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e8c  00000000  00000000  00158f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c78 	.word	0x08004c78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004c78 	.word	0x08004c78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	68b9      	ldr	r1, [r7, #8]
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <_write+0x28>)
 80004dc:	f002 fef8 	bl	80032d0 <HAL_UART_Transmit>
  return len;
 80004e0:	687b      	ldr	r3, [r7, #4]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000e0 	.word	0x200000e0

080004f0 <validate_sequence>:
  * @brief  Validate sequence received from uart.
  * @param  None
  * @retval None
  */
void validate_sequence(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
	// Define the code to validate
	printf("Validating\r\n");
 80004f6:	4827      	ldr	r0, [pc, #156]	; (8000594 <validate_sequence+0xa4>)
 80004f8:	f004 f818 	bl	800452c <puts>
	uint8_t id[10] = "1007477187";
 80004fc:	4a26      	ldr	r2, [pc, #152]	; (8000598 <validate_sequence+0xa8>)
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	ca07      	ldmia	r2, {r0, r1, r2}
 8000504:	c303      	stmia	r3!, {r0, r1}
 8000506:	801a      	strh	r2, [r3, #0]
	uint8_t seq[10];
	// Iterate over the ring buffer to check the sequence
	for (uint8_t idx = 0; idx < 10; idx++) {
 8000508:	2300      	movs	r3, #0
 800050a:	75fb      	strb	r3, [r7, #23]
 800050c:	e009      	b.n	8000522 <validate_sequence+0x32>
		// Get ring buffer variables
	  ring_buffer_get(&ring_buffer_uart_rx, &seq[idx]);
 800050e:	7dfb      	ldrb	r3, [r7, #23]
 8000510:	463a      	mov	r2, r7
 8000512:	4413      	add	r3, r2
 8000514:	4619      	mov	r1, r3
 8000516:	4821      	ldr	r0, [pc, #132]	; (800059c <validate_sequence+0xac>)
 8000518:	f003 fc4d 	bl	8003db6 <ring_buffer_get>
	for (uint8_t idx = 0; idx < 10; idx++) {
 800051c:	7dfb      	ldrb	r3, [r7, #23]
 800051e:	3301      	adds	r3, #1
 8000520:	75fb      	strb	r3, [r7, #23]
 8000522:	7dfb      	ldrb	r3, [r7, #23]
 8000524:	2b09      	cmp	r3, #9
 8000526:	d9f2      	bls.n	800050e <validate_sequence+0x1e>
	}

	// Check if the sequence is equal to the data received in ring buffer
	if (memcmp(id, seq, 10) == 0) {
 8000528:	4639      	mov	r1, r7
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	220a      	movs	r2, #10
 8000530:	4618      	mov	r0, r3
 8000532:	f004 f8db 	bl	80046ec <memcmp>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d113      	bne.n	8000564 <validate_sequence+0x74>
	// Print success in screen in case the sequence is correct
	  ssd1306_Fill(Black);
 800053c:	2000      	movs	r0, #0
 800053e:	f003 fd47 	bl	8003fd0 <ssd1306_Fill>
	  ssd1306_SetCursor(20, 20);
 8000542:	2114      	movs	r1, #20
 8000544:	2014      	movs	r0, #20
 8000546:	f003 fe91 	bl	800426c <ssd1306_SetCursor>
	  ssd1306_WriteString("Success", Font_11x18, White);
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <validate_sequence+0xb0>)
 800054c:	2301      	movs	r3, #1
 800054e:	ca06      	ldmia	r2, {r1, r2}
 8000550:	4814      	ldr	r0, [pc, #80]	; (80005a4 <validate_sequence+0xb4>)
 8000552:	f003 fe65 	bl	8004220 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000556:	f003 fd5f 	bl	8004018 <ssd1306_UpdateScreen>
	  HAL_Delay(10000);
 800055a:	f242 7010 	movw	r0, #10000	; 0x2710
 800055e:	f000 fbd1 	bl	8000d04 <HAL_Delay>
	  ssd1306_SetCursor(20, 20);
	  ssd1306_WriteString("Failed", Font_11x18, White);
	  ssd1306_UpdateScreen();
	  HAL_Delay(10000);
	}
}
 8000562:	e012      	b.n	800058a <validate_sequence+0x9a>
	  ssd1306_Fill(Black);
 8000564:	2000      	movs	r0, #0
 8000566:	f003 fd33 	bl	8003fd0 <ssd1306_Fill>
	  ssd1306_SetCursor(20, 20);
 800056a:	2114      	movs	r1, #20
 800056c:	2014      	movs	r0, #20
 800056e:	f003 fe7d 	bl	800426c <ssd1306_SetCursor>
	  ssd1306_WriteString("Failed", Font_11x18, White);
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <validate_sequence+0xb0>)
 8000574:	2301      	movs	r3, #1
 8000576:	ca06      	ldmia	r2, {r1, r2}
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <validate_sequence+0xb8>)
 800057a:	f003 fe51 	bl	8004220 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800057e:	f003 fd4b 	bl	8004018 <ssd1306_UpdateScreen>
	  HAL_Delay(10000);
 8000582:	f242 7010 	movw	r0, #10000	; 0x2710
 8000586:	f000 fbbd 	bl	8000d04 <HAL_Delay>
}
 800058a:	bf00      	nop
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	08004c90 	.word	0x08004c90
 8000598:	08004cac 	.word	0x08004cac
 800059c:	20000168 	.word	0x20000168
 80005a0:	2000000c 	.word	0x2000000c
 80005a4:	08004c9c 	.word	0x08004c9c
 80005a8:	08004ca4 	.word	0x08004ca4

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fb2b 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f82f 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8ef 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8bd 	bl	800073c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005c2:	f000 f87b 	bl	80006bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 80005c6:	2210      	movs	r2, #16
 80005c8:	490f      	ldr	r1, [pc, #60]	; (8000608 <main+0x5c>)
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <main+0x60>)
 80005cc:	f003 fbd7 	bl	8003d7e <ring_buffer_init>

  //HAL_UART_Receive_IT(&huart2, &rx_data, 1);

  ssd1306_Init();
 80005d0:	f003 fc94 	bl	8003efc <ssd1306_Init>
  ssd1306_Fill(Black);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f003 fcfb 	bl	8003fd0 <ssd1306_Fill>
  ssd1306_SetCursor(20, 20);
 80005da:	2114      	movs	r1, #20
 80005dc:	2014      	movs	r0, #20
 80005de:	f003 fe45 	bl	800426c <ssd1306_SetCursor>
  ssd1306_WriteString("Waiting...", Font_11x18, White);
 80005e2:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <main+0x64>)
 80005e4:	2301      	movs	r3, #1
 80005e6:	ca06      	ldmia	r2, {r1, r2}
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0x68>)
 80005ea:	f003 fe19 	bl	8004220 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80005ee:	f003 fd13 	bl	8004018 <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t size = ring_buffer_size(&ring_buffer_uart_rx);
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <main+0x60>)
 80005f4:	f003 fc09 	bl	8003e0a <ring_buffer_size>
 80005f8:	4603      	mov	r3, r0
 80005fa:	80fb      	strh	r3, [r7, #6]
	  // Check if there is some input
	  if (size != 0) {
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f7      	beq.n	80005f2 <main+0x46>
		  validate_sequence();
 8000602:	f7ff ff75 	bl	80004f0 <validate_sequence>
  {
 8000606:	e7f4      	b.n	80005f2 <main+0x46>
 8000608:	20000174 	.word	0x20000174
 800060c:	20000168 	.word	0x20000168
 8000610:	2000000c 	.word	0x2000000c
 8000614:	08004cb8 	.word	0x08004cb8

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f870 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f001 fae7 	bl	8001c10 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f90e 	bl	8000868 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fb1e 	bl	8001cbc <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000686:	f000 f8ef 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2104      	movs	r1, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fee6 	bl	8002474 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ae:	f000 f8db 	bl	8000868 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	; 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	f000 fdd0 	bl	800129c <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 f8b1 	bl	8000868 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_I2C1_Init+0x74>)
 800070a:	f001 f9db 	bl	8001ac4 <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 f8a8 	bl	8000868 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2C1_Init+0x74>)
 800071c:	f001 fa1d 	bl	8001b5a <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 f89f 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000008c 	.word	0x2000008c
 8000734:	40005400 	.word	0x40005400
 8000738:	10909cec 	.word	0x10909cec

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000780:	f002 fd58 	bl	8003234 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f86d 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000e0 	.word	0x200000e0
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a24      	ldr	r2, [pc, #144]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_GPIO_Init+0xc4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 fd27 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000824:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0xc8>)
 8000836:	f000 fb6f 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083a:	2320      	movs	r3, #32
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f000 fb60 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	; 0x60
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0ac      	sub	sp, #176	; 0xb0
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2288      	movs	r2, #136	; 0x88
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 ff15 	bl	800470c <memset>
  if(hi2c->Instance==I2C1)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <HAL_I2C_MspInit+0xb0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d13b      	bne.n	8000964 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 ffdf 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f7ff ffb0 	bl	8000868 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_I2C_MspInit+0xb4>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	4a18      	ldr	r2, [pc, #96]	; (8000970 <HAL_I2C_MspInit+0xb4>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_I2C_MspInit+0xb4>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000920:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000928:	2312      	movs	r3, #18
 800092a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093a:	2304      	movs	r3, #4
 800093c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <HAL_I2C_MspInit+0xb8>)
 8000948:	f000 fae6 	bl	8000f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_I2C_MspInit+0xb4>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_I2C_MspInit+0xb4>)
 8000952:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000956:	6593      	str	r3, [r2, #88]	; 0x58
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_I2C_MspInit+0xb4>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	37b0      	adds	r7, #176	; 0xb0
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40005400 	.word	0x40005400
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ac      	sub	sp, #176	; 0xb0
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2288      	movs	r2, #136	; 0x88
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f003 feb7 	bl	800470c <memset>
  if(huart->Instance==USART2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <HAL_UART_MspInit+0xb0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d13b      	bne.n	8000a20 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 ff81 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ff52 	bl	8000868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6593      	str	r3, [r2, #88]	; 0x58
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f4:	230c      	movs	r3, #12
 80009f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fa7c 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	37b0      	adds	r7, #176	; 0xb0
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40021000 	.word	0x40021000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f922 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e00a      	b.n	8000aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a96:	f3af 8000 	nop.w
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	b2ca      	uxtb	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf0      	blt.n	8000a96 <_read+0x12>
  }

  return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <_isatty>:

int _isatty(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f003 fe26 	bl	80047a8 <__errno>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20018000 	.word	0x20018000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	20000184 	.word	0x20000184
 8000b90:	200006e0 	.word	0x200006e0

08000b94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bbc:	f7ff ffea 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopForever+0xe>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopForever+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be6:	f003 fde5 	bl	80047b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bea:	f7ff fcdf 	bl	80005ac <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bfc:	08005a78 	.word	0x08005a78
  ldr r2, =_sbss
 8000c00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c04:	200006e0 	.word	0x200006e0

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_Init+0x3c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_Init+0x3c>)
 8000c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f944 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f80f 	bl	8000c4c <HAL_InitTick>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	e001      	b.n	8000c3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3a:	f7ff fe1b 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_InitTick+0x70>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f941 	bl	8000efe <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d809      	bhi.n	8000c9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f919 	bl	8000ec6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_InitTick+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e001      	b.n	8000cac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000188 	.word	0x20000188

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000188 	.word	0x20000188

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff47 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff5c 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffb0 	bl	8000e6c <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	e17f      	b.n	8001228 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8171 	beq.w	8001222 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d005      	beq.n	8000f58 <HAL_GPIO_Init+0x40>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	f003 0201 	and.w	r2, r3, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d118      	bne.n	8000ff8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d017      	beq.n	8001034 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	6939      	ldr	r1, [r7, #16]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80ac 	beq.w	8001222 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <HAL_GPIO_Init+0x330>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	4a5e      	ldr	r2, [pc, #376]	; (8001248 <HAL_GPIO_Init+0x330>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6613      	str	r3, [r2, #96]	; 0x60
 80010d6:	4b5c      	ldr	r3, [pc, #368]	; (8001248 <HAL_GPIO_Init+0x330>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010e2:	4a5a      	ldr	r2, [pc, #360]	; (800124c <HAL_GPIO_Init+0x334>)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800110c:	d025      	beq.n	800115a <HAL_GPIO_Init+0x242>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x338>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01f      	beq.n	8001156 <HAL_GPIO_Init+0x23e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x33c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x23a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x340>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x236>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x344>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x232>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x348>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x22e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x34c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x22a>
 800113e:	2306      	movs	r3, #6
 8001140:	e00c      	b.n	800115c <HAL_GPIO_Init+0x244>
 8001142:	2307      	movs	r3, #7
 8001144:	e00a      	b.n	800115c <HAL_GPIO_Init+0x244>
 8001146:	2305      	movs	r3, #5
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x244>
 800114a:	2304      	movs	r3, #4
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x244>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x244>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x244>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x244>
 800115a:	2300      	movs	r3, #0
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800116c:	4937      	ldr	r1, [pc, #220]	; (800124c <HAL_GPIO_Init+0x334>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_GPIO_Init+0x350>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800119e:	4a32      	ldr	r2, [pc, #200]	; (8001268 <HAL_GPIO_Init+0x350>)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_GPIO_Init+0x350>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_GPIO_Init+0x350>)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x350>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f2:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_GPIO_Init+0x350>)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_GPIO_Init+0x350>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_GPIO_Init+0x350>)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	f47f ae78 	bne.w	8000f28 <HAL_GPIO_Init+0x10>
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	48000400 	.word	0x48000400
 8001254:	48000800 	.word	0x48000800
 8001258:	48000c00 	.word	0x48000c00
 800125c:	48001000 	.word	0x48001000
 8001260:	48001400 	.word	0x48001400
 8001264:	48001800 	.word	0x48001800
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001288:	e002      	b.n	8001290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e08d      	b.n	80013ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fafa 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2224      	movs	r2, #36	; 0x24
 80012cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e006      	b.n	8001324 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001322:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d108      	bne.n	800133e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	e007      	b.n	800134e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800134c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800135c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001360:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001370:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69d9      	ldr	r1, [r3, #28]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2220      	movs	r2, #32
 80013b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af02      	add	r7, sp, #8
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	817b      	strh	r3, [r7, #10]
 80013e6:	460b      	mov	r3, r1
 80013e8:	813b      	strh	r3, [r7, #8]
 80013ea:	4613      	mov	r3, r2
 80013ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	f040 80f9 	bne.w	80015ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <HAL_I2C_Mem_Write+0x34>
 8001402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0ed      	b.n	80015f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Mem_Write+0x4e>
 800141e:	2302      	movs	r3, #2
 8001420:	e0e6      	b.n	80015f0 <HAL_I2C_Mem_Write+0x21c>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800142a:	f7ff fc5f 	bl	8000cec <HAL_GetTick>
 800142e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2319      	movs	r3, #25
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f955 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0d1      	b.n	80015f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2221      	movs	r2, #33	; 0x21
 8001450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a3a      	ldr	r2, [r7, #32]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800146c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001474:	88f8      	ldrh	r0, [r7, #6]
 8001476:	893a      	ldrh	r2, [r7, #8]
 8001478:	8979      	ldrh	r1, [r7, #10]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4603      	mov	r3, r0
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 f8b9 	bl	80015fc <I2C_RequestMemoryWrite>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0a9      	b.n	80015f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d90e      	bls.n	80014c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	22ff      	movs	r2, #255	; 0xff
 80014aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	8979      	ldrh	r1, [r7, #10]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 facf 	bl	8001a60 <I2C_TransferConfig>
 80014c2:	e00f      	b.n	80014e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	8979      	ldrh	r1, [r7, #10]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 fabe 	bl	8001a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 f94e 	bl	800178a <I2C_WaitOnTXISFlagUntilTimeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e07b      	b.n	80015f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001520:	3b01      	subs	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d034      	beq.n	800159c <HAL_I2C_Mem_Write+0x1c8>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	2b00      	cmp	r3, #0
 8001538:	d130      	bne.n	800159c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	2200      	movs	r2, #0
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f8d1 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e04d      	b.n	80015f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d90e      	bls.n	800157c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	22ff      	movs	r2, #255	; 0xff
 8001562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	b2da      	uxtb	r2, r3
 800156a:	8979      	ldrh	r1, [r7, #10]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 fa73 	bl	8001a60 <I2C_TransferConfig>
 800157a:	e00f      	b.n	800159c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	b2da      	uxtb	r2, r3
 800158c:	8979      	ldrh	r1, [r7, #10]
 800158e:	2300      	movs	r3, #0
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fa62 	bl	8001a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d19e      	bne.n	80014e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f934 	bl	8001818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e01a      	b.n	80015f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2220      	movs	r2, #32
 80015c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_I2C_Mem_Write+0x224>)
 80015ce:	400b      	ands	r3, r1
 80015d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015ee:	2302      	movs	r3, #2
  }
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	fe00e800 	.word	0xfe00e800

080015fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	4608      	mov	r0, r1
 8001606:	4611      	mov	r1, r2
 8001608:	461a      	mov	r2, r3
 800160a:	4603      	mov	r3, r0
 800160c:	817b      	strh	r3, [r7, #10]
 800160e:	460b      	mov	r3, r1
 8001610:	813b      	strh	r3, [r7, #8]
 8001612:	4613      	mov	r3, r2
 8001614:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	8979      	ldrh	r1, [r7, #10]
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <I2C_RequestMemoryWrite+0xa4>)
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 fa1b 	bl	8001a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	69b9      	ldr	r1, [r7, #24]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f8ab 	bl	800178a <I2C_WaitOnTXISFlagUntilTimeout>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e02c      	b.n	8001698 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001644:	893b      	ldrh	r3, [r7, #8]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
 800164e:	e015      	b.n	800167c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001650:	893b      	ldrh	r3, [r7, #8]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	69b9      	ldr	r1, [r7, #24]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f891 	bl	800178a <I2C_WaitOnTXISFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e012      	b.n	8001698 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001672:	893b      	ldrh	r3, [r7, #8]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2200      	movs	r2, #0
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 f830 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	80002000 	.word	0x80002000

080016a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d103      	bne.n	80016c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d007      	beq.n	80016e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	619a      	str	r2, [r3, #24]
  }
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016fc:	e031      	b.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d02d      	beq.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001706:	f7ff faf1 	bl	8000cec <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d302      	bcc.n	800171c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d122      	bne.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4013      	ands	r3, r2
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	429a      	cmp	r2, r3
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	429a      	cmp	r2, r3
 8001738:	d113      	bne.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f043 0220 	orr.w	r2, r3, #32
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699a      	ldr	r2, [r3, #24]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4013      	ands	r3, r2
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	429a      	cmp	r2, r3
 800177e:	d0be      	beq.n	80016fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001796:	e033      	b.n	8001800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68b9      	ldr	r1, [r7, #8]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f87f 	bl	80018a0 <I2C_IsErrorOccurred>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e031      	b.n	8001810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b2:	d025      	beq.n	8001800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017b4:	f7ff fa9a 	bl	8000cec <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d302      	bcc.n	80017ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d11a      	bne.n	8001800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d013      	beq.n	8001800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f043 0220 	orr.w	r2, r3, #32
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e007      	b.n	8001810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d1c4      	bne.n	8001798 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001824:	e02f      	b.n	8001886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f838 	bl	80018a0 <I2C_IsErrorOccurred>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e02d      	b.n	8001896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800183a:	f7ff fa57 	bl	8000cec <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	429a      	cmp	r2, r3
 8001848:	d302      	bcc.n	8001850 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d11a      	bne.n	8001886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b20      	cmp	r3, #32
 800185c:	d013      	beq.n	8001886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f043 0220 	orr.w	r2, r3, #32
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e007      	b.n	8001896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b20      	cmp	r3, #32
 8001892:	d1c8      	bne.n	8001826 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d068      	beq.n	800199e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2210      	movs	r2, #16
 80018d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018d4:	e049      	b.n	800196a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d045      	beq.n	800196a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018de:	f7ff fa05 	bl	8000cec <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d302      	bcc.n	80018f4 <I2C_IsErrorOccurred+0x54>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d13a      	bne.n	800196a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001906:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001916:	d121      	bne.n	800195c <I2C_IsErrorOccurred+0xbc>
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800191e:	d01d      	beq.n	800195c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001920:	7cfb      	ldrb	r3, [r7, #19]
 8001922:	2b20      	cmp	r3, #32
 8001924:	d01a      	beq.n	800195c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001934:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001936:	f7ff f9d9 	bl	8000cec <HAL_GetTick>
 800193a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800193c:	e00e      	b.n	800195c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800193e:	f7ff f9d5 	bl	8000cec <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b19      	cmp	r3, #25
 800194a:	d907      	bls.n	800195c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f043 0320 	orr.w	r3, r3, #32
 8001952:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800195a:	e006      	b.n	800196a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b20      	cmp	r3, #32
 8001968:	d1e9      	bne.n	800193e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b20      	cmp	r3, #32
 8001976:	d003      	beq.n	8001980 <I2C_IsErrorOccurred+0xe0>
 8001978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0aa      	beq.n	80018d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2220      	movs	r2, #32
 800198e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01c      	beq.n	8001a4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f7ff fe45 	bl	80016a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <I2C_IsErrorOccurred+0x1bc>)
 8001a26:	400b      	ands	r3, r1
 8001a28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	fe00e800 	.word	0xfe00e800

08001a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	817b      	strh	r3, [r7, #10]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a78:	7a7b      	ldrb	r3, [r7, #9]
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	0d5b      	lsrs	r3, r3, #21
 8001a9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <I2C_TransferConfig+0x60>)
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	ea02 0103 	and.w	r1, r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	03ff63ff 	.word	0x03ff63ff

08001ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	d138      	bne.n	8001b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e032      	b.n	8001b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2224      	movs	r2, #36	; 0x24
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e000      	b.n	8001b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b4c:	2302      	movs	r3, #2
  }
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d139      	bne.n	8001be4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e033      	b.n	8001be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2224      	movs	r2, #36	; 0x24
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
  }
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40007000 	.word	0x40007000

08001c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c1e:	d130      	bne.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2c:	d038      	beq.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2232      	movs	r2, #50	; 0x32
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
 8001c48:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	0c9b      	lsrs	r3, r3, #18
 8001c50:	3301      	adds	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c54:	e002      	b.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c68:	d102      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f2      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7c:	d110      	bne.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e00f      	b.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d007      	beq.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c98:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	431bde83 	.word	0x431bde83

08001cbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e3ca      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cce:	4b97      	ldr	r3, [pc, #604]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd8:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80e4 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_RCC_OscConfig+0x4a>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	f040 808b 	bne.w	8001e14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f040 8087 	bne.w	8001e14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x62>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e3a2      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_RCC_OscConfig+0x7c>
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_OscConfig+0x88>
 8001d38:	4b7c      	ldr	r3, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d223      	bcs.n	8001d90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fd55 	bl	80027fc <RCC_SetFlashLatencyFromMSIRange>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e383      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5c:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a72      	ldr	r2, [pc, #456]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	496d      	ldr	r1, [pc, #436]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7a:	4b6c      	ldr	r3, [pc, #432]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4968      	ldr	r1, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
 8001d8e:	e025      	b.n	8001ddc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d90:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a65      	ldr	r2, [pc, #404]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4960      	ldr	r1, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	495b      	ldr	r1, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fd15 	bl	80027fc <RCC_SetFlashLatencyFromMSIRange>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e343      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ddc:	f000 fc4a 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	4950      	ldr	r1, [pc, #320]	; (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	4a4e      	ldr	r2, [pc, #312]	; (8001f34 <HAL_RCC_OscConfig+0x278>)
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <HAL_RCC_OscConfig+0x27c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe ff23 	bl	8000c4c <HAL_InitTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d052      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	e327      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d032      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a42      	ldr	r2, [pc, #264]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e28:	f7fe ff60 	bl	8000cec <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e30:	f7fe ff5c 	bl	8000cec <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e310      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a36      	ldr	r2, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4931      	ldr	r1, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	492c      	ldr	r1, [pc, #176]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e01a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe ff2d 	bl	8000cec <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e96:	f7fe ff29 	bl	8000cec <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e2dd      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x1da>
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d074      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x21a>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d10e      	bne.n	8001eee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d10b      	bne.n	8001eee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d064      	beq.n	8001fac <HAL_RCC_OscConfig+0x2f0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d160      	bne.n	8001fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e2ba      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x24a>
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e026      	b.n	8001f54 <HAL_RCC_OscConfig+0x298>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0e:	d115      	bne.n	8001f3c <HAL_RCC_OscConfig+0x280>
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a02      	ldr	r2, [pc, #8]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e014      	b.n	8001f54 <HAL_RCC_OscConfig+0x298>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08004cc4 	.word	0x08004cc4
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	4ba0      	ldr	r3, [pc, #640]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a9f      	ldr	r2, [pc, #636]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b9d      	ldr	r3, [pc, #628]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a9c      	ldr	r2, [pc, #624]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fec6 	bl	8000cec <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fec2 	bl	8000cec <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e276      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f76:	4b92      	ldr	r3, [pc, #584]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x2a8>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe feb2 	bl	8000cec <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe feae 	bl	8000cec <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e262      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9e:	4b88      	ldr	r3, [pc, #544]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x2d0>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d060      	beq.n	800207c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x310>
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d119      	bne.n	8001ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d116      	bne.n	8001ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fcc:	4b7c      	ldr	r3, [pc, #496]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x328>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e23f      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	4973      	ldr	r1, [pc, #460]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff8:	e040      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d023      	beq.n	800204a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002002:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6e      	ldr	r2, [pc, #440]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7fe fe6d 	bl	8000cec <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7fe fe69 	bl	8000cec <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e21d      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002028:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	495f      	ldr	r1, [pc, #380]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
 8002048:	e018      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe fe49 	bl	8000cec <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7fe fe45 	bl	8000cec <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1f9      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d03c      	beq.n	8002102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01c      	beq.n	80020ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002090:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002096:	4a4a      	ldr	r2, [pc, #296]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7fe fe24 	bl	8000cec <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7fe fe20 	bl	8000cec <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1d4      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ef      	beq.n	80020a8 <HAL_RCC_OscConfig+0x3ec>
 80020c8:	e01b      	b.n	8002102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d0:	4a3b      	ldr	r2, [pc, #236]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7fe fe07 	bl	8000cec <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7fe fe03 	bl	8000cec <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1b7      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ef      	bne.n	80020e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a6 	beq.w	800225c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002138:	2301      	movs	r3, #1
 800213a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_RCC_OscConfig+0x508>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d118      	bne.n	800217a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_RCC_OscConfig+0x508>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_RCC_OscConfig+0x508>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002154:	f7fe fdca 	bl	8000cec <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215c:	f7fe fdc6 	bl	8000cec <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e17a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x508>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <HAL_RCC_OscConfig+0x4d8>
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002192:	e029      	b.n	80021e8 <HAL_RCC_OscConfig+0x52c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d115      	bne.n	80021c8 <HAL_RCC_OscConfig+0x50c>
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <HAL_RCC_OscConfig+0x504>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021bc:	e014      	b.n	80021e8 <HAL_RCC_OscConfig+0x52c>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
 80021c8:	4b9c      	ldr	r3, [pc, #624]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	4a9b      	ldr	r2, [pc, #620]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d8:	4b98      	ldr	r3, [pc, #608]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a97      	ldr	r2, [pc, #604]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe fd7c 	bl	8000cec <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe fd78 	bl	8000cec <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e12a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	4b8b      	ldr	r3, [pc, #556]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ed      	beq.n	80021f8 <HAL_RCC_OscConfig+0x53c>
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fd65 	bl	8000cec <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fd61 	bl	8000cec <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e113      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1ed      	bne.n	8002226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b7a      	ldr	r3, [pc, #488]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	4a79      	ldr	r2, [pc, #484]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80fe 	beq.w	8002462 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 80d0 	bne.w	8002410 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002270:	4b72      	ldr	r3, [pc, #456]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	429a      	cmp	r2, r3
 8002282:	d130      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	3b01      	subs	r3, #1
 8002290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d127      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11f      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022b0:	2a07      	cmp	r2, #7
 80022b2:	bf14      	ite	ne
 80022b4:	2201      	movne	r2, #1
 80022b6:	2200      	moveq	r2, #0
 80022b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d113      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	3b01      	subs	r3, #1
 80022e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d06e      	beq.n	80023c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d069      	beq.n	80023c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0ad      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002308:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a4b      	ldr	r2, [pc, #300]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800230e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002312:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002314:	f7fe fcea 	bl	8000cec <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fce6 	bl	8000cec <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e09a      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232e:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b40      	ldr	r3, [pc, #256]	; (8002440 <HAL_RCC_OscConfig+0x784>)
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800234a:	3a01      	subs	r2, #1
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002354:	0212      	lsls	r2, r2, #8
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800235c:	0852      	lsrs	r2, r2, #1
 800235e:	3a01      	subs	r2, #1
 8002360:	0552      	lsls	r2, r2, #21
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002368:	0852      	lsrs	r2, r2, #1
 800236a:	3a01      	subs	r2, #1
 800236c:	0652      	lsls	r2, r2, #25
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002374:	0912      	lsrs	r2, r2, #4
 8002376:	0452      	lsls	r2, r2, #17
 8002378:	430a      	orrs	r2, r1
 800237a:	4930      	ldr	r1, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002380:	4b2e      	ldr	r3, [pc, #184]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2d      	ldr	r2, [pc, #180]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a2a      	ldr	r2, [pc, #168]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002398:	f7fe fca8 	bl	8000cec <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fca4 	bl	8000cec <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e058      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023be:	e050      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e04f      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d148      	bne.n	8002462 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a19      	ldr	r2, [pc, #100]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023dc:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_RCC_OscConfig+0x780>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e8:	f7fe fc80 	bl	8000cec <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fc7c 	bl	8000cec <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e030      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x734>
 800240e:	e028      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d023      	beq.n	800245e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_OscConfig+0x780>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_RCC_OscConfig+0x780>)
 800241c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fc63 	bl	8000cec <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	e00c      	b.n	8002444 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe fc5f 	bl	8000cec <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d905      	bls.n	8002444 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
 800243c:	40021000 	.word	0x40021000
 8002440:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ec      	bne.n	800242a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4905      	ldr	r1, [pc, #20]	; (800246c <HAL_RCC_OscConfig+0x7b0>)
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_OscConfig+0x7b4>)
 8002458:	4013      	ands	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
 800245c:	e001      	b.n	8002462 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	feeefffc 	.word	0xfeeefffc

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0e7      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b75      	ldr	r3, [pc, #468]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4970      	ldr	r1, [pc, #448]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0cf      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d908      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4960      	ldr	r1, [pc, #384]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04c      	beq.n	800258c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	4b5a      	ldr	r3, [pc, #360]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d121      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0a6      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e09a      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08e      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253a:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e086      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4943      	ldr	r1, [pc, #268]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255c:	f7fe fbc6 	bl	8000cec <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fbc2 	bl	8000cec <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e06e      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d208      	bcs.n	80025ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	492b      	ldr	r1, [pc, #172]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d210      	bcs.n	80025ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 0207 	bic.w	r2, r3, #7
 80025d0:	4923      	ldr	r1, [pc, #140]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e036      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4918      	ldr	r1, [pc, #96]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4910      	ldr	r1, [pc, #64]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002628:	f000 f824 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	490b      	ldr	r1, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1f4>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1fc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fafd 	bl	8000c4c <HAL_InitTick>
 8002652:	4603      	mov	r3, r0
 8002654:	72fb      	strb	r3, [r7, #11]

  return status;
 8002656:	7afb      	ldrb	r3, [r7, #11]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40022000 	.word	0x40022000
 8002664:	40021000 	.word	0x40021000
 8002668:	08004cc4 	.word	0x08004cc4
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11e      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e004      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 80026fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d134      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0xa6>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d003      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xac>
 8002718:	e005      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 800271c:	617b      	str	r3, [r7, #20]
      break;
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e002      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	617b      	str	r3, [r7, #20]
      break;
 800272a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	3301      	adds	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	fb03 f202 	mul.w	r2, r3, r2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	0e5b      	lsrs	r3, r3, #25
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	3301      	adds	r3, #1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800276c:	69bb      	ldr	r3, [r7, #24]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	08004cdc 	.word	0x08004cdc
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4904      	ldr	r1, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08004cd4 	.word	0x08004cd4

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d4:	f7ff ffda 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0adb      	lsrs	r3, r3, #11
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08004cd4 	.word	0x08004cd4

080027fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002814:	f7ff f9ee 	bl	8001bf4 <HAL_PWREx_GetVoltageRange>
 8002818:	6178      	str	r0, [r7, #20]
 800281a:	e014      	b.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002826:	6593      	str	r3, [r2, #88]	; 0x58
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002834:	f7ff f9de 	bl	8001bf4 <HAL_PWREx_GetVoltageRange>
 8002838:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d10b      	bne.n	8002866 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d919      	bls.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2ba0      	cmp	r3, #160	; 0xa0
 8002858:	d902      	bls.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285a:	2302      	movs	r3, #2
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e013      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e010      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d902      	bls.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800286c:	2303      	movs	r3, #3
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e00a      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b80      	cmp	r3, #128	; 0x80
 8002876:	d102      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002878:	2302      	movs	r3, #2
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e004      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b70      	cmp	r3, #112	; 0x70
 8002882:	d101      	bne.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002884:	2301      	movs	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	4909      	ldr	r1, [pc, #36]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40022000 	.word	0x40022000

080028bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c4:	2300      	movs	r3, #0
 80028c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c8:	2300      	movs	r3, #0
 80028ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d041      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028e0:	d02a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028e6:	d824      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ec:	d008      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f2:	d81e      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fc:	d010      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028fe:	e018      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002900:	4b86      	ldr	r3, [pc, #536]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a85      	ldr	r2, [pc, #532]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800290c:	e015      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fabb 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800291e:	e00c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3320      	adds	r3, #32
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fba6 	bl	8003078 <RCCEx_PLLSAI2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002930:	e003      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	74fb      	strb	r3, [r7, #19]
      break;
 8002936:	e000      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002940:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294e:	4973      	ldr	r1, [pc, #460]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002956:	e001      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d041      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800296c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002970:	d02a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002972:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002976:	d824      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800297e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002982:	d81e      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298c:	d010      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800298e:	e018      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002990:	4b62      	ldr	r3, [pc, #392]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a61      	ldr	r2, [pc, #388]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800299c:	e015      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fa73 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 80029aa:	4603      	mov	r3, r0
 80029ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029ae:	e00c      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3320      	adds	r3, #32
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fb5e 	bl	8003078 <RCCEx_PLLSAI2_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c0:	e003      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	74fb      	strb	r3, [r7, #19]
      break;
 80029c6:	e000      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d0:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029de:	494f      	ldr	r1, [pc, #316]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029e6:	e001      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a0 	beq.w	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	4a40      	ldr	r2, [pc, #256]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a20:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a30:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3a      	ldr	r2, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe f956 	bl	8000cec <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a42:	e009      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe f952 	bl	8000cec <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	74fb      	strb	r3, [r7, #19]
        break;
 8002a56:	e005      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a58:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ef      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d15c      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01f      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d019      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	4a20      	ldr	r2, [pc, #128]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ab4:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe f911 	bl	8000cec <HAL_GetTick>
 8002aca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002acc:	e00b      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe f90d 	bl	8000cec <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d902      	bls.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ae4:	e006      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ec      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0a:	4904      	ldr	r1, [pc, #16]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b12:	e009      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	74bb      	strb	r3, [r7, #18]
 8002b18:	e006      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b28:	7c7b      	ldrb	r3, [r7, #17]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2e:	4b9e      	ldr	r3, [pc, #632]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	4a9d      	ldr	r2, [pc, #628]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b46:	4b98      	ldr	r3, [pc, #608]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 0203 	bic.w	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	4994      	ldr	r1, [pc, #592]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b68:	4b8f      	ldr	r3, [pc, #572]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f023 020c 	bic.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	498c      	ldr	r1, [pc, #560]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b8a:	4b87      	ldr	r3, [pc, #540]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	4983      	ldr	r1, [pc, #524]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bac:	4b7e      	ldr	r3, [pc, #504]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	497b      	ldr	r1, [pc, #492]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bce:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bdc:	4972      	ldr	r1, [pc, #456]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bf0:	4b6d      	ldr	r3, [pc, #436]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	496a      	ldr	r1, [pc, #424]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c12:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	4961      	ldr	r1, [pc, #388]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c34:	4b5c      	ldr	r3, [pc, #368]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	4959      	ldr	r1, [pc, #356]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c56:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	4950      	ldr	r1, [pc, #320]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	4948      	ldr	r1, [pc, #288]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c9a:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	493f      	ldr	r1, [pc, #252]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d028      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cbc:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cca:	4937      	ldr	r1, [pc, #220]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cda:	d106      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cdc:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a31      	ldr	r2, [pc, #196]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce6:	60d3      	str	r3, [r2, #12]
 8002ce8:	e011      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f8c8 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d028      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	491f      	ldr	r1, [pc, #124]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d38:	d106      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d44:	60d3      	str	r3, [r2, #12]
 8002d46:	e011      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2101      	movs	r1, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f899 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02b      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	4908      	ldr	r1, [pc, #32]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d96:	d109      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4a02      	ldr	r2, [pc, #8]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da2:	60d3      	str	r3, [r2, #12]
 8002da4:	e014      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f867 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02f      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dea:	4928      	ldr	r1, [pc, #160]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dfa:	d10d      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2102      	movs	r1, #2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f844 	bl	8002e90 <RCCEx_PLLSAI1_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	74bb      	strb	r3, [r7, #18]
 8002e16:	e011      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3320      	adds	r3, #32
 8002e26:	2102      	movs	r1, #2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f925 	bl	8003078 <RCCEx_PLLSAI2_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e48:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e56:	490d      	ldr	r1, [pc, #52]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7a:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e82:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000

08002e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e9e:	4b75      	ldr	r3, [pc, #468]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d018      	beq.n	8002edc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eaa:	4b72      	ldr	r3, [pc, #456]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0203 	and.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d10d      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d047      	beq.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	e044      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d018      	beq.n	8002f16 <RCCEx_PLLSAI1_Config+0x86>
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d825      	bhi.n	8002f34 <RCCEx_PLLSAI1_Config+0xa4>
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d002      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x62>
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d009      	beq.n	8002f04 <RCCEx_PLLSAI1_Config+0x74>
 8002ef0:	e020      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ef2:	4b60      	ldr	r3, [pc, #384]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f02:	e01a      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f04:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e013      	b.n	8002f3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f16:	4b57      	ldr	r3, [pc, #348]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f22:	4b54      	ldr	r3, [pc, #336]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f32:	e006      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e004      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f42:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	4944      	ldr	r1, [pc, #272]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d17d      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f6c:	4b41      	ldr	r3, [pc, #260]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a40      	ldr	r2, [pc, #256]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fd feb8 	bl	8000cec <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f7e:	e009      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f80:	f7fd feb4 	bl	8000cec <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d902      	bls.n	8002f94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	73fb      	strb	r3, [r7, #15]
        break;
 8002f92:	e005      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f94:	4b37      	ldr	r3, [pc, #220]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ef      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d160      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d111      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fac:	4b31      	ldr	r3, [pc, #196]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6892      	ldr	r2, [r2, #8]
 8002fbc:	0211      	lsls	r1, r2, #8
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	0912      	lsrs	r2, r2, #4
 8002fc4:	0452      	lsls	r2, r2, #17
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	492a      	ldr	r1, [pc, #168]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	610b      	str	r3, [r1, #16]
 8002fce:	e027      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d112      	bne.n	8002ffc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd6:	4b27      	ldr	r3, [pc, #156]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6892      	ldr	r2, [r2, #8]
 8002fe6:	0211      	lsls	r1, r2, #8
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6912      	ldr	r2, [r2, #16]
 8002fec:	0852      	lsrs	r2, r2, #1
 8002fee:	3a01      	subs	r2, #1
 8002ff0:	0552      	lsls	r2, r2, #21
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	491f      	ldr	r1, [pc, #124]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]
 8002ffa:	e011      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6952      	ldr	r2, [r2, #20]
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0652      	lsls	r2, r2, #25
 8003018:	430a      	orrs	r2, r1
 800301a:	4916      	ldr	r1, [pc, #88]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a13      	ldr	r2, [pc, #76]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800302a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fd fe5e 	bl	8000cec <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003032:	e009      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003034:	f7fd fe5a 	bl	8000cec <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	73fb      	strb	r3, [r7, #15]
          break;
 8003046:	e005      	b.n	8003054 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ef      	beq.n	8003034 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	4904      	ldr	r1, [pc, #16]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000

08003078 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003086:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d018      	beq.n	80030c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003092:	4b67      	ldr	r3, [pc, #412]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0203 	and.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d10d      	bne.n	80030be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
       ||
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030aa:	4b61      	ldr	r3, [pc, #388]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
       ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d047      	beq.n	800314e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e044      	b.n	800314e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d018      	beq.n	80030fe <RCCEx_PLLSAI2_Config+0x86>
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d825      	bhi.n	800311c <RCCEx_PLLSAI2_Config+0xa4>
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d002      	beq.n	80030da <RCCEx_PLLSAI2_Config+0x62>
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d009      	beq.n	80030ec <RCCEx_PLLSAI2_Config+0x74>
 80030d8:	e020      	b.n	800311c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030da:	4b55      	ldr	r3, [pc, #340]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d11d      	bne.n	8003122 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ea:	e01a      	b.n	8003122 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030ec:	4b50      	ldr	r3, [pc, #320]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d116      	bne.n	8003126 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fc:	e013      	b.n	8003126 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311a:	e006      	b.n	800312a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      break;
 8003120:	e004      	b.n	800312c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800312a:	bf00      	nop
    }

    if(status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	430b      	orrs	r3, r1
 8003148:	4939      	ldr	r1, [pc, #228]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d167      	bne.n	8003224 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a35      	ldr	r2, [pc, #212]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003160:	f7fd fdc4 	bl	8000cec <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003166:	e009      	b.n	800317c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003168:	f7fd fdc0 	bl	8000cec <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d902      	bls.n	800317c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	73fb      	strb	r3, [r7, #15]
        break;
 800317a:	e005      	b.n	8003188 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800317c:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ef      	bne.n	8003168 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d14a      	bne.n	8003224 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d111      	bne.n	80031b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003194:	4b26      	ldr	r3, [pc, #152]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	0211      	lsls	r1, r2, #8
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68d2      	ldr	r2, [r2, #12]
 80031aa:	0912      	lsrs	r2, r2, #4
 80031ac:	0452      	lsls	r2, r2, #17
 80031ae:	430a      	orrs	r2, r1
 80031b0:	491f      	ldr	r1, [pc, #124]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	614b      	str	r3, [r1, #20]
 80031b6:	e011      	b.n	80031dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	0211      	lsls	r1, r2, #8
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6912      	ldr	r2, [r2, #16]
 80031ce:	0852      	lsrs	r2, r2, #1
 80031d0:	3a01      	subs	r2, #1
 80031d2:	0652      	lsls	r2, r2, #25
 80031d4:	430a      	orrs	r2, r1
 80031d6:	4916      	ldr	r1, [pc, #88]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a13      	ldr	r2, [pc, #76]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fd fd80 	bl	8000cec <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031ee:	e009      	b.n	8003204 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031f0:	f7fd fd7c 	bl	8000cec <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d902      	bls.n	8003204 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	73fb      	strb	r3, [r7, #15]
          break;
 8003202:	e005      	b.n	8003210 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	4904      	ldr	r1, [pc, #16]	; (8003230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003220:	4313      	orrs	r3, r2
 8003222:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e040      	b.n	80032c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fb8e 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fb6a 	bl	8003954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f8af 	bl	80033e4 <UART_SetConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e01b      	b.n	80032c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800329e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fbe9 	bl	8003a98 <UART_CheckIdleState>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d178      	bne.n	80033da <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_UART_Transmit+0x24>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e071      	b.n	80033dc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2221      	movs	r2, #33	; 0x21
 8003304:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003306:	f7fd fcf1 	bl	8000cec <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	88fa      	ldrh	r2, [r7, #6]
 8003310:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d108      	bne.n	8003338 <HAL_UART_Transmit+0x68>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003340:	e030      	b.n	80033a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fc4b 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e03c      	b.n	80033dc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003374:	b292      	uxth	r2, r2
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	3302      	adds	r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	e008      	b.n	8003392 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b292      	uxth	r2, r2
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	3301      	adds	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1c8      	bne.n	8003342 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2200      	movs	r2, #0
 80033b8:	2140      	movs	r1, #64	; 0x40
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fc14 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e005      	b.n	80033dc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e8:	b08a      	sub	sp, #40	; 0x28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	4313      	orrs	r3, r2
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4ba4      	ldr	r3, [pc, #656]	; (80036a4 <UART_SetConfig+0x2c0>)
 8003414:	4013      	ands	r3, r2
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341c:	430b      	orrs	r3, r1
 800341e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a99      	ldr	r2, [pc, #612]	; (80036a8 <UART_SetConfig+0x2c4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	4313      	orrs	r3, r2
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a90      	ldr	r2, [pc, #576]	; (80036ac <UART_SetConfig+0x2c8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d126      	bne.n	80034bc <UART_SetConfig+0xd8>
 800346e:	4b90      	ldr	r3, [pc, #576]	; (80036b0 <UART_SetConfig+0x2cc>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b03      	cmp	r3, #3
 800347a:	d81b      	bhi.n	80034b4 <UART_SetConfig+0xd0>
 800347c:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <UART_SetConfig+0xa0>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	08003495 	.word	0x08003495
 8003488:	080034a5 	.word	0x080034a5
 800348c:	0800349d 	.word	0x0800349d
 8003490:	080034ad 	.word	0x080034ad
 8003494:	2301      	movs	r3, #1
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349a:	e116      	b.n	80036ca <UART_SetConfig+0x2e6>
 800349c:	2302      	movs	r3, #2
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a2:	e112      	b.n	80036ca <UART_SetConfig+0x2e6>
 80034a4:	2304      	movs	r3, #4
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034aa:	e10e      	b.n	80036ca <UART_SetConfig+0x2e6>
 80034ac:	2308      	movs	r3, #8
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e10a      	b.n	80036ca <UART_SetConfig+0x2e6>
 80034b4:	2310      	movs	r3, #16
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e106      	b.n	80036ca <UART_SetConfig+0x2e6>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a7c      	ldr	r2, [pc, #496]	; (80036b4 <UART_SetConfig+0x2d0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d138      	bne.n	8003538 <UART_SetConfig+0x154>
 80034c6:	4b7a      	ldr	r3, [pc, #488]	; (80036b0 <UART_SetConfig+0x2cc>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d82d      	bhi.n	8003530 <UART_SetConfig+0x14c>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0xf8>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003511 	.word	0x08003511
 80034e0:	08003531 	.word	0x08003531
 80034e4:	08003531 	.word	0x08003531
 80034e8:	08003531 	.word	0x08003531
 80034ec:	08003521 	.word	0x08003521
 80034f0:	08003531 	.word	0x08003531
 80034f4:	08003531 	.word	0x08003531
 80034f8:	08003531 	.word	0x08003531
 80034fc:	08003519 	.word	0x08003519
 8003500:	08003531 	.word	0x08003531
 8003504:	08003531 	.word	0x08003531
 8003508:	08003531 	.word	0x08003531
 800350c:	08003529 	.word	0x08003529
 8003510:	2300      	movs	r3, #0
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003516:	e0d8      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003518:	2302      	movs	r3, #2
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351e:	e0d4      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003520:	2304      	movs	r3, #4
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003526:	e0d0      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003528:	2308      	movs	r3, #8
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352e:	e0cc      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003530:	2310      	movs	r3, #16
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003536:	e0c8      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5e      	ldr	r2, [pc, #376]	; (80036b8 <UART_SetConfig+0x2d4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d125      	bne.n	800358e <UART_SetConfig+0x1aa>
 8003542:	4b5b      	ldr	r3, [pc, #364]	; (80036b0 <UART_SetConfig+0x2cc>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800354c:	2b30      	cmp	r3, #48	; 0x30
 800354e:	d016      	beq.n	800357e <UART_SetConfig+0x19a>
 8003550:	2b30      	cmp	r3, #48	; 0x30
 8003552:	d818      	bhi.n	8003586 <UART_SetConfig+0x1a2>
 8003554:	2b20      	cmp	r3, #32
 8003556:	d00a      	beq.n	800356e <UART_SetConfig+0x18a>
 8003558:	2b20      	cmp	r3, #32
 800355a:	d814      	bhi.n	8003586 <UART_SetConfig+0x1a2>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <UART_SetConfig+0x182>
 8003560:	2b10      	cmp	r3, #16
 8003562:	d008      	beq.n	8003576 <UART_SetConfig+0x192>
 8003564:	e00f      	b.n	8003586 <UART_SetConfig+0x1a2>
 8003566:	2300      	movs	r3, #0
 8003568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356c:	e0ad      	b.n	80036ca <UART_SetConfig+0x2e6>
 800356e:	2302      	movs	r3, #2
 8003570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003574:	e0a9      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003576:	2304      	movs	r3, #4
 8003578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357c:	e0a5      	b.n	80036ca <UART_SetConfig+0x2e6>
 800357e:	2308      	movs	r3, #8
 8003580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003584:	e0a1      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003586:	2310      	movs	r3, #16
 8003588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358c:	e09d      	b.n	80036ca <UART_SetConfig+0x2e6>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a4a      	ldr	r2, [pc, #296]	; (80036bc <UART_SetConfig+0x2d8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d125      	bne.n	80035e4 <UART_SetConfig+0x200>
 8003598:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <UART_SetConfig+0x2cc>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035a2:	2bc0      	cmp	r3, #192	; 0xc0
 80035a4:	d016      	beq.n	80035d4 <UART_SetConfig+0x1f0>
 80035a6:	2bc0      	cmp	r3, #192	; 0xc0
 80035a8:	d818      	bhi.n	80035dc <UART_SetConfig+0x1f8>
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d00a      	beq.n	80035c4 <UART_SetConfig+0x1e0>
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d814      	bhi.n	80035dc <UART_SetConfig+0x1f8>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <UART_SetConfig+0x1d8>
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d008      	beq.n	80035cc <UART_SetConfig+0x1e8>
 80035ba:	e00f      	b.n	80035dc <UART_SetConfig+0x1f8>
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c2:	e082      	b.n	80036ca <UART_SetConfig+0x2e6>
 80035c4:	2302      	movs	r3, #2
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ca:	e07e      	b.n	80036ca <UART_SetConfig+0x2e6>
 80035cc:	2304      	movs	r3, #4
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d2:	e07a      	b.n	80036ca <UART_SetConfig+0x2e6>
 80035d4:	2308      	movs	r3, #8
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035da:	e076      	b.n	80036ca <UART_SetConfig+0x2e6>
 80035dc:	2310      	movs	r3, #16
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	e072      	b.n	80036ca <UART_SetConfig+0x2e6>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a35      	ldr	r2, [pc, #212]	; (80036c0 <UART_SetConfig+0x2dc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d12a      	bne.n	8003644 <UART_SetConfig+0x260>
 80035ee:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <UART_SetConfig+0x2cc>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035fc:	d01a      	beq.n	8003634 <UART_SetConfig+0x250>
 80035fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003602:	d81b      	bhi.n	800363c <UART_SetConfig+0x258>
 8003604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003608:	d00c      	beq.n	8003624 <UART_SetConfig+0x240>
 800360a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360e:	d815      	bhi.n	800363c <UART_SetConfig+0x258>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <UART_SetConfig+0x238>
 8003614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003618:	d008      	beq.n	800362c <UART_SetConfig+0x248>
 800361a:	e00f      	b.n	800363c <UART_SetConfig+0x258>
 800361c:	2300      	movs	r3, #0
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e052      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003624:	2302      	movs	r3, #2
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e04e      	b.n	80036ca <UART_SetConfig+0x2e6>
 800362c:	2304      	movs	r3, #4
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e04a      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003634:	2308      	movs	r3, #8
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e046      	b.n	80036ca <UART_SetConfig+0x2e6>
 800363c:	2310      	movs	r3, #16
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e042      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <UART_SetConfig+0x2c4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d13a      	bne.n	80036c4 <UART_SetConfig+0x2e0>
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <UART_SetConfig+0x2cc>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365c:	d01a      	beq.n	8003694 <UART_SetConfig+0x2b0>
 800365e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003662:	d81b      	bhi.n	800369c <UART_SetConfig+0x2b8>
 8003664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003668:	d00c      	beq.n	8003684 <UART_SetConfig+0x2a0>
 800366a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366e:	d815      	bhi.n	800369c <UART_SetConfig+0x2b8>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <UART_SetConfig+0x298>
 8003674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003678:	d008      	beq.n	800368c <UART_SetConfig+0x2a8>
 800367a:	e00f      	b.n	800369c <UART_SetConfig+0x2b8>
 800367c:	2300      	movs	r3, #0
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e022      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003684:	2302      	movs	r3, #2
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368a:	e01e      	b.n	80036ca <UART_SetConfig+0x2e6>
 800368c:	2304      	movs	r3, #4
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003692:	e01a      	b.n	80036ca <UART_SetConfig+0x2e6>
 8003694:	2308      	movs	r3, #8
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e016      	b.n	80036ca <UART_SetConfig+0x2e6>
 800369c:	2310      	movs	r3, #16
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a2:	e012      	b.n	80036ca <UART_SetConfig+0x2e6>
 80036a4:	efff69f3 	.word	0xefff69f3
 80036a8:	40008000 	.word	0x40008000
 80036ac:	40013800 	.word	0x40013800
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40004400 	.word	0x40004400
 80036b8:	40004800 	.word	0x40004800
 80036bc:	40004c00 	.word	0x40004c00
 80036c0:	40005000 	.word	0x40005000
 80036c4:	2310      	movs	r3, #16
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a9f      	ldr	r2, [pc, #636]	; (800394c <UART_SetConfig+0x568>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d17a      	bne.n	80037ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d824      	bhi.n	8003726 <UART_SetConfig+0x342>
 80036dc:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <UART_SetConfig+0x300>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	08003709 	.word	0x08003709
 80036e8:	08003727 	.word	0x08003727
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003727 	.word	0x08003727
 80036f4:	08003717 	.word	0x08003717
 80036f8:	08003727 	.word	0x08003727
 80036fc:	08003727 	.word	0x08003727
 8003700:	08003727 	.word	0x08003727
 8003704:	0800371f 	.word	0x0800371f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7ff f84c 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 800370c:	61f8      	str	r0, [r7, #28]
        break;
 800370e:	e010      	b.n	8003732 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003710:	4b8f      	ldr	r3, [pc, #572]	; (8003950 <UART_SetConfig+0x56c>)
 8003712:	61fb      	str	r3, [r7, #28]
        break;
 8003714:	e00d      	b.n	8003732 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003716:	f7fe ffad 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800371a:	61f8      	str	r0, [r7, #28]
        break;
 800371c:	e009      	b.n	8003732 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003722:	61fb      	str	r3, [r7, #28]
        break;
 8003724:	e005      	b.n	8003732 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80fb 	beq.w	8003930 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	429a      	cmp	r2, r3
 8003748:	d305      	bcc.n	8003756 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	429a      	cmp	r2, r3
 8003754:	d903      	bls.n	800375e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800375c:	e0e8      	b.n	8003930 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2200      	movs	r2, #0
 8003762:	461c      	mov	r4, r3
 8003764:	4615      	mov	r5, r2
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	022b      	lsls	r3, r5, #8
 8003770:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003774:	0222      	lsls	r2, r4, #8
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	6849      	ldr	r1, [r1, #4]
 800377a:	0849      	lsrs	r1, r1, #1
 800377c:	2000      	movs	r0, #0
 800377e:	4688      	mov	r8, r1
 8003780:	4681      	mov	r9, r0
 8003782:	eb12 0a08 	adds.w	sl, r2, r8
 8003786:	eb43 0b09 	adc.w	fp, r3, r9
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003798:	4650      	mov	r0, sl
 800379a:	4659      	mov	r1, fp
 800379c:	f7fc fd14 	bl	80001c8 <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4613      	mov	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ae:	d308      	bcc.n	80037c2 <UART_SetConfig+0x3de>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b6:	d204      	bcs.n	80037c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	e0b6      	b.n	8003930 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037c8:	e0b2      	b.n	8003930 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d2:	d15e      	bne.n	8003892 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d828      	bhi.n	800382e <UART_SetConfig+0x44a>
 80037dc:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <UART_SetConfig+0x400>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003811 	.word	0x08003811
 80037ec:	08003819 	.word	0x08003819
 80037f0:	0800382f 	.word	0x0800382f
 80037f4:	0800381f 	.word	0x0800381f
 80037f8:	0800382f 	.word	0x0800382f
 80037fc:	0800382f 	.word	0x0800382f
 8003800:	0800382f 	.word	0x0800382f
 8003804:	08003827 	.word	0x08003827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003808:	f7fe ffcc 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 800380c:	61f8      	str	r0, [r7, #28]
        break;
 800380e:	e014      	b.n	800383a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003810:	f7fe ffde 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003814:	61f8      	str	r0, [r7, #28]
        break;
 8003816:	e010      	b.n	800383a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003818:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <UART_SetConfig+0x56c>)
 800381a:	61fb      	str	r3, [r7, #28]
        break;
 800381c:	e00d      	b.n	800383a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381e:	f7fe ff29 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003822:	61f8      	str	r0, [r7, #28]
        break;
 8003824:	e009      	b.n	800383a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382a:	61fb      	str	r3, [r7, #28]
        break;
 800382c:	e005      	b.n	800383a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003838:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d077      	beq.n	8003930 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005a      	lsls	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	441a      	add	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	d916      	bls.n	800388a <UART_SetConfig+0x4a6>
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003862:	d212      	bcs.n	800388a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f023 030f 	bic.w	r3, r3, #15
 800386c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	b29b      	uxth	r3, r3
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	b29a      	uxth	r2, r3
 800387a:	8afb      	ldrh	r3, [r7, #22]
 800387c:	4313      	orrs	r3, r2
 800387e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	8afa      	ldrh	r2, [r7, #22]
 8003886:	60da      	str	r2, [r3, #12]
 8003888:	e052      	b.n	8003930 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003890:	e04e      	b.n	8003930 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003896:	2b08      	cmp	r3, #8
 8003898:	d827      	bhi.n	80038ea <UART_SetConfig+0x506>
 800389a:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0x4bc>)
 800389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038cd 	.word	0x080038cd
 80038a8:	080038d5 	.word	0x080038d5
 80038ac:	080038eb 	.word	0x080038eb
 80038b0:	080038db 	.word	0x080038db
 80038b4:	080038eb 	.word	0x080038eb
 80038b8:	080038eb 	.word	0x080038eb
 80038bc:	080038eb 	.word	0x080038eb
 80038c0:	080038e3 	.word	0x080038e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe ff6e 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 80038c8:	61f8      	str	r0, [r7, #28]
        break;
 80038ca:	e014      	b.n	80038f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038cc:	f7fe ff80 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 80038d0:	61f8      	str	r0, [r7, #28]
        break;
 80038d2:	e010      	b.n	80038f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d4:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <UART_SetConfig+0x56c>)
 80038d6:	61fb      	str	r3, [r7, #28]
        break;
 80038d8:	e00d      	b.n	80038f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038da:	f7fe fecb 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 80038de:	61f8      	str	r0, [r7, #28]
        break;
 80038e0:	e009      	b.n	80038f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e6:	61fb      	str	r3, [r7, #28]
        break;
 80038e8:	e005      	b.n	80038f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038f4:	bf00      	nop
    }

    if (pclk != 0U)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d019      	beq.n	8003930 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	085a      	lsrs	r2, r3, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	441a      	add	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	fbb2 f3f3 	udiv	r3, r2, r3
 800390e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b0f      	cmp	r3, #15
 8003914:	d909      	bls.n	800392a <UART_SetConfig+0x546>
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391c:	d205      	bcs.n	800392a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	e002      	b.n	8003930 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800393c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003940:	4618      	mov	r0, r3
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394a:	bf00      	nop
 800394c:	40008000 	.word	0x40008000
 8003950:	00f42400 	.word	0x00f42400

08003954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01a      	beq.n	8003a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a52:	d10a      	bne.n	8003a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b098      	sub	sp, #96	; 0x60
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aa8:	f7fd f920 	bl	8000cec <HAL_GetTick>
 8003aac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d12e      	bne.n	8003b1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f88c 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d021      	beq.n	8003b1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aea:	653b      	str	r3, [r7, #80]	; 0x50
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
 8003af6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e6      	bne.n	8003ad6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e062      	b.n	8003be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d149      	bne.n	8003bbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b30:	2200      	movs	r2, #0
 8003b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f856 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d03c      	beq.n	8003bbc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
 8003b62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b94:	61fa      	str	r2, [r7, #28]
 8003b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	69b9      	ldr	r1, [r7, #24]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e011      	b.n	8003be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3758      	adds	r7, #88	; 0x58
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf8:	e049      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d045      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fd f873 	bl	8000cec <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e048      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d031      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d110      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f838 	bl	8003cb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e029      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c68:	d111      	bne.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f81e 	bl	8003cb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e00f      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4013      	ands	r3, r2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d0a6      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b095      	sub	sp, #84	; 0x54
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8003cde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e6      	bne.n	8003cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e5      	bne.n	8003cf0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d118      	bne.n	8003d5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f023 0310 	bic.w	r3, r3, #16
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6979      	ldr	r1, [r7, #20]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	613b      	str	r3, [r7, #16]
   return(result);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e6      	bne.n	8003d2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d72:	bf00      	nop
 8003d74:	3754      	adds	r7, #84	; 0x54
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b085      	sub	sp, #20
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	729a      	strb	r2, [r3, #10]
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <ring_buffer_get>:
/**
 * @brief This function reads a data from the ring buffer
 * @param data: the pointer to the address to write the data
*/
uint8_t ring_buffer_get(ring_buffer_t *ring_buffer, uint8_t *data)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
	if (ring_buffer_is_empty(ring_buffer) == 0) {
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f84a 	bl	8003e5a <ring_buffer_is_empty>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d119      	bne.n	8003e00 <ring_buffer_get+0x4a>
		*data = ring_buffer->buffer[ring_buffer->tail];
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	88d2      	ldrh	r2, [r2, #6]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	701a      	strb	r2, [r3, #0]
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	88db      	ldrh	r3, [r3, #6]
 8003de0:	3301      	adds	r3, #1
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	8912      	ldrh	r2, [r2, #8]
 8003de6:	fb93 f1f2 	sdiv	r1, r3, r2
 8003dea:	fb01 f202 	mul.w	r2, r1, r2
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	80da      	strh	r2, [r3, #6]
		ring_buffer->is_full = 0;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	729a      	strb	r2, [r3, #10]
		return 1;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <ring_buffer_get+0x4c>
	}
	return 0;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <ring_buffer_size>:

/**
 * @brief This function returns the size of the ring buffer
*/
uint16_t ring_buffer_size(ring_buffer_t *ring_buffer)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	81fb      	strh	r3, [r7, #14]

	if ((ring_buffer->is_full == 0) && (ring_buffer->tail <= ring_buffer->head)) {
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	7a9b      	ldrb	r3, [r3, #10]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <ring_buffer_size+0x2e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	88da      	ldrh	r2, [r3, #6]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	889b      	ldrh	r3, [r3, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d806      	bhi.n	8003e38 <ring_buffer_size+0x2e>
		size = ring_buffer->head - ring_buffer->tail;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	889a      	ldrh	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	88db      	ldrh	r3, [r3, #6]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	81fb      	strh	r3, [r7, #14]
 8003e36:	e009      	b.n	8003e4c <ring_buffer_size+0x42>
	} else {
		size = ring_buffer->head + (ring_buffer->capacity - ring_buffer->tail);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	889a      	ldrh	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8919      	ldrh	r1, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	88db      	ldrh	r3, [r3, #6]
 8003e44:	1acb      	subs	r3, r1, r3
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	81fb      	strh	r3, [r7, #14]
	}

	return size;
 8003e4c:	89fb      	ldrh	r3, [r7, #14]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <ring_buffer_is_empty>:

/**
 * @brief this function checks if the buffer is empty
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *ring_buffer)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
	return ((ring_buffer->is_full == 0) && (ring_buffer->tail == ring_buffer->head));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7a9b      	ldrb	r3, [r3, #10]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <ring_buffer_is_empty+0x20>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	88da      	ldrh	r2, [r3, #6]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	889b      	ldrh	r3, [r3, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d101      	bne.n	8003e7a <ring_buffer_is_empty+0x20>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <ring_buffer_is_empty+0x22>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003e8a:	b480      	push	{r7}
 8003e8c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	9302      	str	r3, [sp, #8]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2178      	movs	r1, #120	; 0x78
 8003eb6:	4803      	ldr	r0, [pc, #12]	; (8003ec4 <ssd1306_WriteCommand+0x2c>)
 8003eb8:	f7fd fa8c 	bl	80013d4 <HAL_I2C_Mem_Write>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	2000008c 	.word	0x2000008c

08003ec8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af04      	add	r7, sp, #16
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	9202      	str	r2, [sp, #8]
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	2240      	movs	r2, #64	; 0x40
 8003ee6:	2178      	movs	r1, #120	; 0x78
 8003ee8:	4803      	ldr	r0, [pc, #12]	; (8003ef8 <ssd1306_WriteData+0x30>)
 8003eea:	f7fd fa73 	bl	80013d4 <HAL_I2C_Mem_Write>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2000008c 	.word	0x2000008c

08003efc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003f00:	f7ff ffc3 	bl	8003e8a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003f04:	2064      	movs	r0, #100	; 0x64
 8003f06:	f7fc fefd 	bl	8000d04 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	f000 f9da 	bl	80042c4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003f10:	2020      	movs	r0, #32
 8003f12:	f7ff ffc1 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003f16:	2000      	movs	r0, #0
 8003f18:	f7ff ffbe 	bl	8003e98 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003f1c:	20b0      	movs	r0, #176	; 0xb0
 8003f1e:	f7ff ffbb 	bl	8003e98 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003f22:	20c8      	movs	r0, #200	; 0xc8
 8003f24:	f7ff ffb8 	bl	8003e98 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f7ff ffb5 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003f2e:	2010      	movs	r0, #16
 8003f30:	f7ff ffb2 	bl	8003e98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003f34:	2040      	movs	r0, #64	; 0x40
 8003f36:	f7ff ffaf 	bl	8003e98 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003f3a:	20ff      	movs	r0, #255	; 0xff
 8003f3c:	f000 f9ae 	bl	800429c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003f40:	20a1      	movs	r0, #161	; 0xa1
 8003f42:	f7ff ffa9 	bl	8003e98 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003f46:	20a6      	movs	r0, #166	; 0xa6
 8003f48:	f7ff ffa6 	bl	8003e98 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003f4c:	20a8      	movs	r0, #168	; 0xa8
 8003f4e:	f7ff ffa3 	bl	8003e98 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003f52:	203f      	movs	r0, #63	; 0x3f
 8003f54:	f7ff ffa0 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003f58:	20a4      	movs	r0, #164	; 0xa4
 8003f5a:	f7ff ff9d 	bl	8003e98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003f5e:	20d3      	movs	r0, #211	; 0xd3
 8003f60:	f7ff ff9a 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003f64:	2000      	movs	r0, #0
 8003f66:	f7ff ff97 	bl	8003e98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003f6a:	20d5      	movs	r0, #213	; 0xd5
 8003f6c:	f7ff ff94 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003f70:	20f0      	movs	r0, #240	; 0xf0
 8003f72:	f7ff ff91 	bl	8003e98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003f76:	20d9      	movs	r0, #217	; 0xd9
 8003f78:	f7ff ff8e 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003f7c:	2022      	movs	r0, #34	; 0x22
 8003f7e:	f7ff ff8b 	bl	8003e98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003f82:	20da      	movs	r0, #218	; 0xda
 8003f84:	f7ff ff88 	bl	8003e98 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003f88:	2012      	movs	r0, #18
 8003f8a:	f7ff ff85 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003f8e:	20db      	movs	r0, #219	; 0xdb
 8003f90:	f7ff ff82 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003f94:	2020      	movs	r0, #32
 8003f96:	f7ff ff7f 	bl	8003e98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003f9a:	208d      	movs	r0, #141	; 0x8d
 8003f9c:	f7ff ff7c 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003fa0:	2014      	movs	r0, #20
 8003fa2:	f7ff ff79 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f000 f98c 	bl	80042c4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f000 f80f 	bl	8003fd0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003fb2:	f000 f831 	bl	8004018 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <ssd1306_Init+0xd0>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <ssd1306_Init+0xd0>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003fc2:	4b02      	ldr	r3, [pc, #8]	; (8003fcc <ssd1306_Init+0xd0>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	711a      	strb	r2, [r3, #4]
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	2000058c 	.word	0x2000058c

08003fd0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e00d      	b.n	8003ffc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <ssd1306_Fill+0x1a>
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	e000      	b.n	8003fec <ssd1306_Fill+0x1c>
 8003fea:	21ff      	movs	r1, #255	; 0xff
 8003fec:	4a09      	ldr	r2, [pc, #36]	; (8004014 <ssd1306_Fill+0x44>)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d3ed      	bcc.n	8003fe0 <ssd1306_Fill+0x10>
    }
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000018c 	.word	0x2000018c

08004018 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800401e:	2300      	movs	r3, #0
 8004020:	71fb      	strb	r3, [r7, #7]
 8004022:	e016      	b.n	8004052 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	3b50      	subs	r3, #80	; 0x50
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff34 	bl	8003e98 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004030:	2000      	movs	r0, #0
 8004032:	f7ff ff31 	bl	8003e98 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004036:	2010      	movs	r0, #16
 8004038:	f7ff ff2e 	bl	8003e98 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	01db      	lsls	r3, r3, #7
 8004040:	4a08      	ldr	r2, [pc, #32]	; (8004064 <ssd1306_UpdateScreen+0x4c>)
 8004042:	4413      	add	r3, r2
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ff3e 	bl	8003ec8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	3301      	adds	r3, #1
 8004050:	71fb      	strb	r3, [r7, #7]
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	2b07      	cmp	r3, #7
 8004056:	d9e5      	bls.n	8004024 <ssd1306_UpdateScreen+0xc>
    }
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2000018c 	.word	0x2000018c

08004068 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
 8004072:	460b      	mov	r3, r1
 8004074:	71bb      	strb	r3, [r7, #6]
 8004076:	4613      	mov	r3, r2
 8004078:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	2b00      	cmp	r3, #0
 8004080:	db3d      	blt.n	80040fe <ssd1306_DrawPixel+0x96>
 8004082:	79bb      	ldrb	r3, [r7, #6]
 8004084:	2b3f      	cmp	r3, #63	; 0x3f
 8004086:	d83a      	bhi.n	80040fe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004088:	797b      	ldrb	r3, [r7, #5]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d11a      	bne.n	80040c4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800408e:	79fa      	ldrb	r2, [r7, #7]
 8004090:	79bb      	ldrb	r3, [r7, #6]
 8004092:	08db      	lsrs	r3, r3, #3
 8004094:	b2d8      	uxtb	r0, r3
 8004096:	4603      	mov	r3, r0
 8004098:	01db      	lsls	r3, r3, #7
 800409a:	4413      	add	r3, r2
 800409c:	4a1b      	ldr	r2, [pc, #108]	; (800410c <ssd1306_DrawPixel+0xa4>)
 800409e:	5cd3      	ldrb	r3, [r2, r3]
 80040a0:	b25a      	sxtb	r2, r3
 80040a2:	79bb      	ldrb	r3, [r7, #6]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	b25b      	sxtb	r3, r3
 80040b0:	4313      	orrs	r3, r2
 80040b2:	b259      	sxtb	r1, r3
 80040b4:	79fa      	ldrb	r2, [r7, #7]
 80040b6:	4603      	mov	r3, r0
 80040b8:	01db      	lsls	r3, r3, #7
 80040ba:	4413      	add	r3, r2
 80040bc:	b2c9      	uxtb	r1, r1
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <ssd1306_DrawPixel+0xa4>)
 80040c0:	54d1      	strb	r1, [r2, r3]
 80040c2:	e01d      	b.n	8004100 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80040c4:	79fa      	ldrb	r2, [r7, #7]
 80040c6:	79bb      	ldrb	r3, [r7, #6]
 80040c8:	08db      	lsrs	r3, r3, #3
 80040ca:	b2d8      	uxtb	r0, r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	01db      	lsls	r3, r3, #7
 80040d0:	4413      	add	r3, r2
 80040d2:	4a0e      	ldr	r2, [pc, #56]	; (800410c <ssd1306_DrawPixel+0xa4>)
 80040d4:	5cd3      	ldrb	r3, [r2, r3]
 80040d6:	b25a      	sxtb	r2, r3
 80040d8:	79bb      	ldrb	r3, [r7, #6]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	b25b      	sxtb	r3, r3
 80040ea:	4013      	ands	r3, r2
 80040ec:	b259      	sxtb	r1, r3
 80040ee:	79fa      	ldrb	r2, [r7, #7]
 80040f0:	4603      	mov	r3, r0
 80040f2:	01db      	lsls	r3, r3, #7
 80040f4:	4413      	add	r3, r2
 80040f6:	b2c9      	uxtb	r1, r1
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <ssd1306_DrawPixel+0xa4>)
 80040fa:	54d1      	strb	r1, [r2, r3]
 80040fc:	e000      	b.n	8004100 <ssd1306_DrawPixel+0x98>
        return;
 80040fe:	bf00      	nop
    }
}
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	2000018c 	.word	0x2000018c

08004110 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	4604      	mov	r4, r0
 8004118:	1d38      	adds	r0, r7, #4
 800411a:	e880 0006 	stmia.w	r0, {r1, r2}
 800411e:	461a      	mov	r2, r3
 8004120:	4623      	mov	r3, r4
 8004122:	73fb      	strb	r3, [r7, #15]
 8004124:	4613      	mov	r3, r2
 8004126:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b1f      	cmp	r3, #31
 800412c:	d902      	bls.n	8004134 <ssd1306_WriteChar+0x24>
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b7e      	cmp	r3, #126	; 0x7e
 8004132:	d901      	bls.n	8004138 <ssd1306_WriteChar+0x28>
        return 0;
 8004134:	2300      	movs	r3, #0
 8004136:	e06d      	b.n	8004214 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004138:	4b38      	ldr	r3, [pc, #224]	; (800421c <ssd1306_WriteChar+0x10c>)
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	793b      	ldrb	r3, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	2b80      	cmp	r3, #128	; 0x80
 8004144:	dc06      	bgt.n	8004154 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004146:	4b35      	ldr	r3, [pc, #212]	; (800421c <ssd1306_WriteChar+0x10c>)
 8004148:	885b      	ldrh	r3, [r3, #2]
 800414a:	461a      	mov	r2, r3
 800414c:	797b      	ldrb	r3, [r7, #5]
 800414e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	dd01      	ble.n	8004158 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004154:	2300      	movs	r3, #0
 8004156:	e05d      	b.n	8004214 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	e04c      	b.n	80041f8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	3b20      	subs	r3, #32
 8004164:	7979      	ldrb	r1, [r7, #5]
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4619      	mov	r1, r3
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	440b      	add	r3, r1
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	e034      	b.n	80041e8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d012      	beq.n	80041b4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <ssd1306_WriteChar+0x10c>)
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	4413      	add	r3, r2
 800419a:	b2d8      	uxtb	r0, r3
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <ssd1306_WriteChar+0x10c>)
 800419e:	885b      	ldrh	r3, [r3, #2]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	7bba      	ldrb	r2, [r7, #14]
 80041ac:	4619      	mov	r1, r3
 80041ae:	f7ff ff5b 	bl	8004068 <ssd1306_DrawPixel>
 80041b2:	e016      	b.n	80041e2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80041b4:	4b19      	ldr	r3, [pc, #100]	; (800421c <ssd1306_WriteChar+0x10c>)
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	4413      	add	r3, r2
 80041c0:	b2d8      	uxtb	r0, r3
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <ssd1306_WriteChar+0x10c>)
 80041c4:	885b      	ldrh	r3, [r3, #2]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	b2d9      	uxtb	r1, r3
 80041d0:	7bbb      	ldrb	r3, [r7, #14]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	f7ff ff43 	bl	8004068 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	3301      	adds	r3, #1
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	793b      	ldrb	r3, [r7, #4]
 80041ea:	461a      	mov	r2, r3
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d3c5      	bcc.n	800417e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3301      	adds	r3, #1
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	797b      	ldrb	r3, [r7, #5]
 80041fa:	461a      	mov	r2, r3
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4293      	cmp	r3, r2
 8004200:	d3ad      	bcc.n	800415e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <ssd1306_WriteChar+0x10c>)
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	793b      	ldrb	r3, [r7, #4]
 8004208:	b29b      	uxth	r3, r3
 800420a:	4413      	add	r3, r2
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b03      	ldr	r3, [pc, #12]	; (800421c <ssd1306_WriteChar+0x10c>)
 8004210:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3724      	adds	r7, #36	; 0x24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd90      	pop	{r4, r7, pc}
 800421c:	2000058c 	.word	0x2000058c

08004220 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	1d38      	adds	r0, r7, #4
 800422a:	e880 0006 	stmia.w	r0, {r1, r2}
 800422e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004230:	e012      	b.n	8004258 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	7818      	ldrb	r0, [r3, #0]
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	1d3a      	adds	r2, r7, #4
 800423a:	ca06      	ldmia	r2, {r1, r2}
 800423c:	f7ff ff68 	bl	8004110 <ssd1306_WriteChar>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d002      	beq.n	8004252 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	e008      	b.n	8004264 <ssd1306_WriteString+0x44>
        }
        str++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e8      	bne.n	8004232 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	781b      	ldrb	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	460a      	mov	r2, r1
 8004276:	71fb      	strb	r3, [r7, #7]
 8004278:	4613      	mov	r3, r2
 800427a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	b29a      	uxth	r2, r3
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <ssd1306_SetCursor+0x2c>)
 8004282:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004284:	79bb      	ldrb	r3, [r7, #6]
 8004286:	b29a      	uxth	r2, r3
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <ssd1306_SetCursor+0x2c>)
 800428a:	805a      	strh	r2, [r3, #2]
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	2000058c 	.word	0x2000058c

0800429c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80042a6:	2381      	movs	r3, #129	; 0x81
 80042a8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fdf3 	bl	8003e98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fdef 	bl	8003e98 <ssd1306_WriteCommand>
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80042d4:	23af      	movs	r3, #175	; 0xaf
 80042d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <ssd1306_SetDisplayOn+0x38>)
 80042da:	2201      	movs	r2, #1
 80042dc:	715a      	strb	r2, [r3, #5]
 80042de:	e004      	b.n	80042ea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80042e0:	23ae      	movs	r3, #174	; 0xae
 80042e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <ssd1306_SetDisplayOn+0x38>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fdd3 	bl	8003e98 <ssd1306_WriteCommand>
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2000058c 	.word	0x2000058c

08004300 <std>:
 8004300:	2300      	movs	r3, #0
 8004302:	b510      	push	{r4, lr}
 8004304:	4604      	mov	r4, r0
 8004306:	e9c0 3300 	strd	r3, r3, [r0]
 800430a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800430e:	6083      	str	r3, [r0, #8]
 8004310:	8181      	strh	r1, [r0, #12]
 8004312:	6643      	str	r3, [r0, #100]	; 0x64
 8004314:	81c2      	strh	r2, [r0, #14]
 8004316:	6183      	str	r3, [r0, #24]
 8004318:	4619      	mov	r1, r3
 800431a:	2208      	movs	r2, #8
 800431c:	305c      	adds	r0, #92	; 0x5c
 800431e:	f000 f9f5 	bl	800470c <memset>
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <std+0x58>)
 8004324:	6263      	str	r3, [r4, #36]	; 0x24
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <std+0x5c>)
 8004328:	62a3      	str	r3, [r4, #40]	; 0x28
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <std+0x60>)
 800432c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <std+0x64>)
 8004330:	6323      	str	r3, [r4, #48]	; 0x30
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <std+0x68>)
 8004334:	6224      	str	r4, [r4, #32]
 8004336:	429c      	cmp	r4, r3
 8004338:	d006      	beq.n	8004348 <std+0x48>
 800433a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800433e:	4294      	cmp	r4, r2
 8004340:	d002      	beq.n	8004348 <std+0x48>
 8004342:	33d0      	adds	r3, #208	; 0xd0
 8004344:	429c      	cmp	r4, r3
 8004346:	d105      	bne.n	8004354 <std+0x54>
 8004348:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800434c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004350:	f000 ba54 	b.w	80047fc <__retarget_lock_init_recursive>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	bf00      	nop
 8004358:	0800453d 	.word	0x0800453d
 800435c:	0800455f 	.word	0x0800455f
 8004360:	08004597 	.word	0x08004597
 8004364:	080045bb 	.word	0x080045bb
 8004368:	20000594 	.word	0x20000594

0800436c <stdio_exit_handler>:
 800436c:	4a02      	ldr	r2, [pc, #8]	; (8004378 <stdio_exit_handler+0xc>)
 800436e:	4903      	ldr	r1, [pc, #12]	; (800437c <stdio_exit_handler+0x10>)
 8004370:	4803      	ldr	r0, [pc, #12]	; (8004380 <stdio_exit_handler+0x14>)
 8004372:	f000 b869 	b.w	8004448 <_fwalk_sglue>
 8004376:	bf00      	nop
 8004378:	20000014 	.word	0x20000014
 800437c:	08004b01 	.word	0x08004b01
 8004380:	20000020 	.word	0x20000020

08004384 <cleanup_stdio>:
 8004384:	6841      	ldr	r1, [r0, #4]
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <cleanup_stdio+0x34>)
 8004388:	4299      	cmp	r1, r3
 800438a:	b510      	push	{r4, lr}
 800438c:	4604      	mov	r4, r0
 800438e:	d001      	beq.n	8004394 <cleanup_stdio+0x10>
 8004390:	f000 fbb6 	bl	8004b00 <_fflush_r>
 8004394:	68a1      	ldr	r1, [r4, #8]
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <cleanup_stdio+0x38>)
 8004398:	4299      	cmp	r1, r3
 800439a:	d002      	beq.n	80043a2 <cleanup_stdio+0x1e>
 800439c:	4620      	mov	r0, r4
 800439e:	f000 fbaf 	bl	8004b00 <_fflush_r>
 80043a2:	68e1      	ldr	r1, [r4, #12]
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <cleanup_stdio+0x3c>)
 80043a6:	4299      	cmp	r1, r3
 80043a8:	d004      	beq.n	80043b4 <cleanup_stdio+0x30>
 80043aa:	4620      	mov	r0, r4
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b0:	f000 bba6 	b.w	8004b00 <_fflush_r>
 80043b4:	bd10      	pop	{r4, pc}
 80043b6:	bf00      	nop
 80043b8:	20000594 	.word	0x20000594
 80043bc:	200005fc 	.word	0x200005fc
 80043c0:	20000664 	.word	0x20000664

080043c4 <global_stdio_init.part.0>:
 80043c4:	b510      	push	{r4, lr}
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <global_stdio_init.part.0+0x30>)
 80043c8:	4c0b      	ldr	r4, [pc, #44]	; (80043f8 <global_stdio_init.part.0+0x34>)
 80043ca:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <global_stdio_init.part.0+0x38>)
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	4620      	mov	r0, r4
 80043d0:	2200      	movs	r2, #0
 80043d2:	2104      	movs	r1, #4
 80043d4:	f7ff ff94 	bl	8004300 <std>
 80043d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80043dc:	2201      	movs	r2, #1
 80043de:	2109      	movs	r1, #9
 80043e0:	f7ff ff8e 	bl	8004300 <std>
 80043e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80043e8:	2202      	movs	r2, #2
 80043ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ee:	2112      	movs	r1, #18
 80043f0:	f7ff bf86 	b.w	8004300 <std>
 80043f4:	200006cc 	.word	0x200006cc
 80043f8:	20000594 	.word	0x20000594
 80043fc:	0800436d 	.word	0x0800436d

08004400 <__sfp_lock_acquire>:
 8004400:	4801      	ldr	r0, [pc, #4]	; (8004408 <__sfp_lock_acquire+0x8>)
 8004402:	f000 b9fc 	b.w	80047fe <__retarget_lock_acquire_recursive>
 8004406:	bf00      	nop
 8004408:	200006d5 	.word	0x200006d5

0800440c <__sfp_lock_release>:
 800440c:	4801      	ldr	r0, [pc, #4]	; (8004414 <__sfp_lock_release+0x8>)
 800440e:	f000 b9f7 	b.w	8004800 <__retarget_lock_release_recursive>
 8004412:	bf00      	nop
 8004414:	200006d5 	.word	0x200006d5

08004418 <__sinit>:
 8004418:	b510      	push	{r4, lr}
 800441a:	4604      	mov	r4, r0
 800441c:	f7ff fff0 	bl	8004400 <__sfp_lock_acquire>
 8004420:	6a23      	ldr	r3, [r4, #32]
 8004422:	b11b      	cbz	r3, 800442c <__sinit+0x14>
 8004424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004428:	f7ff bff0 	b.w	800440c <__sfp_lock_release>
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <__sinit+0x28>)
 800442e:	6223      	str	r3, [r4, #32]
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <__sinit+0x2c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f5      	bne.n	8004424 <__sinit+0xc>
 8004438:	f7ff ffc4 	bl	80043c4 <global_stdio_init.part.0>
 800443c:	e7f2      	b.n	8004424 <__sinit+0xc>
 800443e:	bf00      	nop
 8004440:	08004385 	.word	0x08004385
 8004444:	200006cc 	.word	0x200006cc

08004448 <_fwalk_sglue>:
 8004448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800444c:	4607      	mov	r7, r0
 800444e:	4688      	mov	r8, r1
 8004450:	4614      	mov	r4, r2
 8004452:	2600      	movs	r6, #0
 8004454:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004458:	f1b9 0901 	subs.w	r9, r9, #1
 800445c:	d505      	bpl.n	800446a <_fwalk_sglue+0x22>
 800445e:	6824      	ldr	r4, [r4, #0]
 8004460:	2c00      	cmp	r4, #0
 8004462:	d1f7      	bne.n	8004454 <_fwalk_sglue+0xc>
 8004464:	4630      	mov	r0, r6
 8004466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800446a:	89ab      	ldrh	r3, [r5, #12]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d907      	bls.n	8004480 <_fwalk_sglue+0x38>
 8004470:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004474:	3301      	adds	r3, #1
 8004476:	d003      	beq.n	8004480 <_fwalk_sglue+0x38>
 8004478:	4629      	mov	r1, r5
 800447a:	4638      	mov	r0, r7
 800447c:	47c0      	blx	r8
 800447e:	4306      	orrs	r6, r0
 8004480:	3568      	adds	r5, #104	; 0x68
 8004482:	e7e9      	b.n	8004458 <_fwalk_sglue+0x10>

08004484 <_puts_r>:
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	b570      	push	{r4, r5, r6, lr}
 8004488:	6884      	ldr	r4, [r0, #8]
 800448a:	4605      	mov	r5, r0
 800448c:	460e      	mov	r6, r1
 800448e:	b90b      	cbnz	r3, 8004494 <_puts_r+0x10>
 8004490:	f7ff ffc2 	bl	8004418 <__sinit>
 8004494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004496:	07db      	lsls	r3, r3, #31
 8004498:	d405      	bmi.n	80044a6 <_puts_r+0x22>
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	0598      	lsls	r0, r3, #22
 800449e:	d402      	bmi.n	80044a6 <_puts_r+0x22>
 80044a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044a2:	f000 f9ac 	bl	80047fe <__retarget_lock_acquire_recursive>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	0719      	lsls	r1, r3, #28
 80044aa:	d513      	bpl.n	80044d4 <_puts_r+0x50>
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	b18b      	cbz	r3, 80044d4 <_puts_r+0x50>
 80044b0:	3e01      	subs	r6, #1
 80044b2:	68a3      	ldr	r3, [r4, #8]
 80044b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044b8:	3b01      	subs	r3, #1
 80044ba:	60a3      	str	r3, [r4, #8]
 80044bc:	b9e9      	cbnz	r1, 80044fa <_puts_r+0x76>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da2e      	bge.n	8004520 <_puts_r+0x9c>
 80044c2:	4622      	mov	r2, r4
 80044c4:	210a      	movs	r1, #10
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 f87b 	bl	80045c2 <__swbuf_r>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d007      	beq.n	80044e0 <_puts_r+0x5c>
 80044d0:	250a      	movs	r5, #10
 80044d2:	e007      	b.n	80044e4 <_puts_r+0x60>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f8b0 	bl	800463c <__swsetup_r>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d0e7      	beq.n	80044b0 <_puts_r+0x2c>
 80044e0:	f04f 35ff 	mov.w	r5, #4294967295
 80044e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044e6:	07da      	lsls	r2, r3, #31
 80044e8:	d405      	bmi.n	80044f6 <_puts_r+0x72>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	059b      	lsls	r3, r3, #22
 80044ee:	d402      	bmi.n	80044f6 <_puts_r+0x72>
 80044f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044f2:	f000 f985 	bl	8004800 <__retarget_lock_release_recursive>
 80044f6:	4628      	mov	r0, r5
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da04      	bge.n	8004508 <_puts_r+0x84>
 80044fe:	69a2      	ldr	r2, [r4, #24]
 8004500:	429a      	cmp	r2, r3
 8004502:	dc06      	bgt.n	8004512 <_puts_r+0x8e>
 8004504:	290a      	cmp	r1, #10
 8004506:	d004      	beq.n	8004512 <_puts_r+0x8e>
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	7019      	strb	r1, [r3, #0]
 8004510:	e7cf      	b.n	80044b2 <_puts_r+0x2e>
 8004512:	4622      	mov	r2, r4
 8004514:	4628      	mov	r0, r5
 8004516:	f000 f854 	bl	80045c2 <__swbuf_r>
 800451a:	3001      	adds	r0, #1
 800451c:	d1c9      	bne.n	80044b2 <_puts_r+0x2e>
 800451e:	e7df      	b.n	80044e0 <_puts_r+0x5c>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	250a      	movs	r5, #10
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	6022      	str	r2, [r4, #0]
 8004528:	701d      	strb	r5, [r3, #0]
 800452a:	e7db      	b.n	80044e4 <_puts_r+0x60>

0800452c <puts>:
 800452c:	4b02      	ldr	r3, [pc, #8]	; (8004538 <puts+0xc>)
 800452e:	4601      	mov	r1, r0
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f7ff bfa7 	b.w	8004484 <_puts_r>
 8004536:	bf00      	nop
 8004538:	2000006c 	.word	0x2000006c

0800453c <__sread>:
 800453c:	b510      	push	{r4, lr}
 800453e:	460c      	mov	r4, r1
 8004540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004544:	f000 f90c 	bl	8004760 <_read_r>
 8004548:	2800      	cmp	r0, #0
 800454a:	bfab      	itete	ge
 800454c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800454e:	89a3      	ldrhlt	r3, [r4, #12]
 8004550:	181b      	addge	r3, r3, r0
 8004552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004556:	bfac      	ite	ge
 8004558:	6563      	strge	r3, [r4, #84]	; 0x54
 800455a:	81a3      	strhlt	r3, [r4, #12]
 800455c:	bd10      	pop	{r4, pc}

0800455e <__swrite>:
 800455e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004562:	461f      	mov	r7, r3
 8004564:	898b      	ldrh	r3, [r1, #12]
 8004566:	05db      	lsls	r3, r3, #23
 8004568:	4605      	mov	r5, r0
 800456a:	460c      	mov	r4, r1
 800456c:	4616      	mov	r6, r2
 800456e:	d505      	bpl.n	800457c <__swrite+0x1e>
 8004570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004574:	2302      	movs	r3, #2
 8004576:	2200      	movs	r2, #0
 8004578:	f000 f8e0 	bl	800473c <_lseek_r>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	4632      	mov	r2, r6
 800458a:	463b      	mov	r3, r7
 800458c:	4628      	mov	r0, r5
 800458e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004592:	f000 b8f7 	b.w	8004784 <_write_r>

08004596 <__sseek>:
 8004596:	b510      	push	{r4, lr}
 8004598:	460c      	mov	r4, r1
 800459a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459e:	f000 f8cd 	bl	800473c <_lseek_r>
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	bf15      	itete	ne
 80045a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80045aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045b2:	81a3      	strheq	r3, [r4, #12]
 80045b4:	bf18      	it	ne
 80045b6:	81a3      	strhne	r3, [r4, #12]
 80045b8:	bd10      	pop	{r4, pc}

080045ba <__sclose>:
 80045ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045be:	f000 b8ad 	b.w	800471c <_close_r>

080045c2 <__swbuf_r>:
 80045c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c4:	460e      	mov	r6, r1
 80045c6:	4614      	mov	r4, r2
 80045c8:	4605      	mov	r5, r0
 80045ca:	b118      	cbz	r0, 80045d4 <__swbuf_r+0x12>
 80045cc:	6a03      	ldr	r3, [r0, #32]
 80045ce:	b90b      	cbnz	r3, 80045d4 <__swbuf_r+0x12>
 80045d0:	f7ff ff22 	bl	8004418 <__sinit>
 80045d4:	69a3      	ldr	r3, [r4, #24]
 80045d6:	60a3      	str	r3, [r4, #8]
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	071a      	lsls	r2, r3, #28
 80045dc:	d525      	bpl.n	800462a <__swbuf_r+0x68>
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	b31b      	cbz	r3, 800462a <__swbuf_r+0x68>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	6922      	ldr	r2, [r4, #16]
 80045e6:	1a98      	subs	r0, r3, r2
 80045e8:	6963      	ldr	r3, [r4, #20]
 80045ea:	b2f6      	uxtb	r6, r6
 80045ec:	4283      	cmp	r3, r0
 80045ee:	4637      	mov	r7, r6
 80045f0:	dc04      	bgt.n	80045fc <__swbuf_r+0x3a>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 fa83 	bl	8004b00 <_fflush_r>
 80045fa:	b9e0      	cbnz	r0, 8004636 <__swbuf_r+0x74>
 80045fc:	68a3      	ldr	r3, [r4, #8]
 80045fe:	3b01      	subs	r3, #1
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	6022      	str	r2, [r4, #0]
 8004608:	701e      	strb	r6, [r3, #0]
 800460a:	6962      	ldr	r2, [r4, #20]
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	429a      	cmp	r2, r3
 8004610:	d004      	beq.n	800461c <__swbuf_r+0x5a>
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	07db      	lsls	r3, r3, #31
 8004616:	d506      	bpl.n	8004626 <__swbuf_r+0x64>
 8004618:	2e0a      	cmp	r6, #10
 800461a:	d104      	bne.n	8004626 <__swbuf_r+0x64>
 800461c:	4621      	mov	r1, r4
 800461e:	4628      	mov	r0, r5
 8004620:	f000 fa6e 	bl	8004b00 <_fflush_r>
 8004624:	b938      	cbnz	r0, 8004636 <__swbuf_r+0x74>
 8004626:	4638      	mov	r0, r7
 8004628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800462a:	4621      	mov	r1, r4
 800462c:	4628      	mov	r0, r5
 800462e:	f000 f805 	bl	800463c <__swsetup_r>
 8004632:	2800      	cmp	r0, #0
 8004634:	d0d5      	beq.n	80045e2 <__swbuf_r+0x20>
 8004636:	f04f 37ff 	mov.w	r7, #4294967295
 800463a:	e7f4      	b.n	8004626 <__swbuf_r+0x64>

0800463c <__swsetup_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <__swsetup_r+0xac>)
 8004640:	4605      	mov	r5, r0
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	460c      	mov	r4, r1
 8004646:	b118      	cbz	r0, 8004650 <__swsetup_r+0x14>
 8004648:	6a03      	ldr	r3, [r0, #32]
 800464a:	b90b      	cbnz	r3, 8004650 <__swsetup_r+0x14>
 800464c:	f7ff fee4 	bl	8004418 <__sinit>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004656:	0718      	lsls	r0, r3, #28
 8004658:	d422      	bmi.n	80046a0 <__swsetup_r+0x64>
 800465a:	06d9      	lsls	r1, r3, #27
 800465c:	d407      	bmi.n	800466e <__swsetup_r+0x32>
 800465e:	2309      	movs	r3, #9
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004666:	81a3      	strh	r3, [r4, #12]
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e034      	b.n	80046d8 <__swsetup_r+0x9c>
 800466e:	0758      	lsls	r0, r3, #29
 8004670:	d512      	bpl.n	8004698 <__swsetup_r+0x5c>
 8004672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004674:	b141      	cbz	r1, 8004688 <__swsetup_r+0x4c>
 8004676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800467a:	4299      	cmp	r1, r3
 800467c:	d002      	beq.n	8004684 <__swsetup_r+0x48>
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f8c0 	bl	8004804 <_free_r>
 8004684:	2300      	movs	r3, #0
 8004686:	6363      	str	r3, [r4, #52]	; 0x34
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800468e:	81a3      	strh	r3, [r4, #12]
 8004690:	2300      	movs	r3, #0
 8004692:	6063      	str	r3, [r4, #4]
 8004694:	6923      	ldr	r3, [r4, #16]
 8004696:	6023      	str	r3, [r4, #0]
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f043 0308 	orr.w	r3, r3, #8
 800469e:	81a3      	strh	r3, [r4, #12]
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	b94b      	cbnz	r3, 80046b8 <__swsetup_r+0x7c>
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ae:	d003      	beq.n	80046b8 <__swsetup_r+0x7c>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fa72 	bl	8004b9c <__smakebuf_r>
 80046b8:	89a0      	ldrh	r0, [r4, #12]
 80046ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046be:	f010 0301 	ands.w	r3, r0, #1
 80046c2:	d00a      	beq.n	80046da <__swsetup_r+0x9e>
 80046c4:	2300      	movs	r3, #0
 80046c6:	60a3      	str	r3, [r4, #8]
 80046c8:	6963      	ldr	r3, [r4, #20]
 80046ca:	425b      	negs	r3, r3
 80046cc:	61a3      	str	r3, [r4, #24]
 80046ce:	6923      	ldr	r3, [r4, #16]
 80046d0:	b943      	cbnz	r3, 80046e4 <__swsetup_r+0xa8>
 80046d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046d6:	d1c4      	bne.n	8004662 <__swsetup_r+0x26>
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
 80046da:	0781      	lsls	r1, r0, #30
 80046dc:	bf58      	it	pl
 80046de:	6963      	ldrpl	r3, [r4, #20]
 80046e0:	60a3      	str	r3, [r4, #8]
 80046e2:	e7f4      	b.n	80046ce <__swsetup_r+0x92>
 80046e4:	2000      	movs	r0, #0
 80046e6:	e7f7      	b.n	80046d8 <__swsetup_r+0x9c>
 80046e8:	2000006c 	.word	0x2000006c

080046ec <memcmp>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	3901      	subs	r1, #1
 80046f0:	4402      	add	r2, r0
 80046f2:	4290      	cmp	r0, r2
 80046f4:	d101      	bne.n	80046fa <memcmp+0xe>
 80046f6:	2000      	movs	r0, #0
 80046f8:	e005      	b.n	8004706 <memcmp+0x1a>
 80046fa:	7803      	ldrb	r3, [r0, #0]
 80046fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004700:	42a3      	cmp	r3, r4
 8004702:	d001      	beq.n	8004708 <memcmp+0x1c>
 8004704:	1b18      	subs	r0, r3, r4
 8004706:	bd10      	pop	{r4, pc}
 8004708:	3001      	adds	r0, #1
 800470a:	e7f2      	b.n	80046f2 <memcmp+0x6>

0800470c <memset>:
 800470c:	4402      	add	r2, r0
 800470e:	4603      	mov	r3, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <_close_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d06      	ldr	r5, [pc, #24]	; (8004738 <_close_r+0x1c>)
 8004720:	2300      	movs	r3, #0
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	f7fc f9c9 	bl	8000abe <_close>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d102      	bne.n	8004736 <_close_r+0x1a>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b103      	cbz	r3, 8004736 <_close_r+0x1a>
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	bd38      	pop	{r3, r4, r5, pc}
 8004738:	200006d0 	.word	0x200006d0

0800473c <_lseek_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d07      	ldr	r5, [pc, #28]	; (800475c <_lseek_r+0x20>)
 8004740:	4604      	mov	r4, r0
 8004742:	4608      	mov	r0, r1
 8004744:	4611      	mov	r1, r2
 8004746:	2200      	movs	r2, #0
 8004748:	602a      	str	r2, [r5, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	f7fc f9de 	bl	8000b0c <_lseek>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_lseek_r+0x1e>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_lseek_r+0x1e>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	200006d0 	.word	0x200006d0

08004760 <_read_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4d07      	ldr	r5, [pc, #28]	; (8004780 <_read_r+0x20>)
 8004764:	4604      	mov	r4, r0
 8004766:	4608      	mov	r0, r1
 8004768:	4611      	mov	r1, r2
 800476a:	2200      	movs	r2, #0
 800476c:	602a      	str	r2, [r5, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f7fc f988 	bl	8000a84 <_read>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_read_r+0x1e>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_read_r+0x1e>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200006d0 	.word	0x200006d0

08004784 <_write_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d07      	ldr	r5, [pc, #28]	; (80047a4 <_write_r+0x20>)
 8004788:	4604      	mov	r4, r0
 800478a:	4608      	mov	r0, r1
 800478c:	4611      	mov	r1, r2
 800478e:	2200      	movs	r2, #0
 8004790:	602a      	str	r2, [r5, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f7fb fe96 	bl	80004c4 <_write>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_write_r+0x1e>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_write_r+0x1e>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	200006d0 	.word	0x200006d0

080047a8 <__errno>:
 80047a8:	4b01      	ldr	r3, [pc, #4]	; (80047b0 <__errno+0x8>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	2000006c 	.word	0x2000006c

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4d0d      	ldr	r5, [pc, #52]	; (80047ec <__libc_init_array+0x38>)
 80047b8:	4c0d      	ldr	r4, [pc, #52]	; (80047f0 <__libc_init_array+0x3c>)
 80047ba:	1b64      	subs	r4, r4, r5
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	2600      	movs	r6, #0
 80047c0:	42a6      	cmp	r6, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	4d0b      	ldr	r5, [pc, #44]	; (80047f4 <__libc_init_array+0x40>)
 80047c6:	4c0c      	ldr	r4, [pc, #48]	; (80047f8 <__libc_init_array+0x44>)
 80047c8:	f000 fa56 	bl	8004c78 <_init>
 80047cc:	1b64      	subs	r4, r4, r5
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	2600      	movs	r6, #0
 80047d2:	42a6      	cmp	r6, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047dc:	4798      	blx	r3
 80047de:	3601      	adds	r6, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e6:	4798      	blx	r3
 80047e8:	3601      	adds	r6, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	08005a70 	.word	0x08005a70
 80047f0:	08005a70 	.word	0x08005a70
 80047f4:	08005a70 	.word	0x08005a70
 80047f8:	08005a74 	.word	0x08005a74

080047fc <__retarget_lock_init_recursive>:
 80047fc:	4770      	bx	lr

080047fe <__retarget_lock_acquire_recursive>:
 80047fe:	4770      	bx	lr

08004800 <__retarget_lock_release_recursive>:
 8004800:	4770      	bx	lr
	...

08004804 <_free_r>:
 8004804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004806:	2900      	cmp	r1, #0
 8004808:	d044      	beq.n	8004894 <_free_r+0x90>
 800480a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800480e:	9001      	str	r0, [sp, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f1a1 0404 	sub.w	r4, r1, #4
 8004816:	bfb8      	it	lt
 8004818:	18e4      	addlt	r4, r4, r3
 800481a:	f000 f8df 	bl	80049dc <__malloc_lock>
 800481e:	4a1e      	ldr	r2, [pc, #120]	; (8004898 <_free_r+0x94>)
 8004820:	9801      	ldr	r0, [sp, #4]
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	b933      	cbnz	r3, 8004834 <_free_r+0x30>
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	6014      	str	r4, [r2, #0]
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004830:	f000 b8da 	b.w	80049e8 <__malloc_unlock>
 8004834:	42a3      	cmp	r3, r4
 8004836:	d908      	bls.n	800484a <_free_r+0x46>
 8004838:	6825      	ldr	r5, [r4, #0]
 800483a:	1961      	adds	r1, r4, r5
 800483c:	428b      	cmp	r3, r1
 800483e:	bf01      	itttt	eq
 8004840:	6819      	ldreq	r1, [r3, #0]
 8004842:	685b      	ldreq	r3, [r3, #4]
 8004844:	1949      	addeq	r1, r1, r5
 8004846:	6021      	streq	r1, [r4, #0]
 8004848:	e7ed      	b.n	8004826 <_free_r+0x22>
 800484a:	461a      	mov	r2, r3
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b10b      	cbz	r3, 8004854 <_free_r+0x50>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d9fa      	bls.n	800484a <_free_r+0x46>
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	1855      	adds	r5, r2, r1
 8004858:	42a5      	cmp	r5, r4
 800485a:	d10b      	bne.n	8004874 <_free_r+0x70>
 800485c:	6824      	ldr	r4, [r4, #0]
 800485e:	4421      	add	r1, r4
 8004860:	1854      	adds	r4, r2, r1
 8004862:	42a3      	cmp	r3, r4
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	d1e0      	bne.n	800482a <_free_r+0x26>
 8004868:	681c      	ldr	r4, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	6053      	str	r3, [r2, #4]
 800486e:	440c      	add	r4, r1
 8004870:	6014      	str	r4, [r2, #0]
 8004872:	e7da      	b.n	800482a <_free_r+0x26>
 8004874:	d902      	bls.n	800487c <_free_r+0x78>
 8004876:	230c      	movs	r3, #12
 8004878:	6003      	str	r3, [r0, #0]
 800487a:	e7d6      	b.n	800482a <_free_r+0x26>
 800487c:	6825      	ldr	r5, [r4, #0]
 800487e:	1961      	adds	r1, r4, r5
 8004880:	428b      	cmp	r3, r1
 8004882:	bf04      	itt	eq
 8004884:	6819      	ldreq	r1, [r3, #0]
 8004886:	685b      	ldreq	r3, [r3, #4]
 8004888:	6063      	str	r3, [r4, #4]
 800488a:	bf04      	itt	eq
 800488c:	1949      	addeq	r1, r1, r5
 800488e:	6021      	streq	r1, [r4, #0]
 8004890:	6054      	str	r4, [r2, #4]
 8004892:	e7ca      	b.n	800482a <_free_r+0x26>
 8004894:	b003      	add	sp, #12
 8004896:	bd30      	pop	{r4, r5, pc}
 8004898:	200006d8 	.word	0x200006d8

0800489c <sbrk_aligned>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	4e0e      	ldr	r6, [pc, #56]	; (80048d8 <sbrk_aligned+0x3c>)
 80048a0:	460c      	mov	r4, r1
 80048a2:	6831      	ldr	r1, [r6, #0]
 80048a4:	4605      	mov	r5, r0
 80048a6:	b911      	cbnz	r1, 80048ae <sbrk_aligned+0x12>
 80048a8:	f000 f9d6 	bl	8004c58 <_sbrk_r>
 80048ac:	6030      	str	r0, [r6, #0]
 80048ae:	4621      	mov	r1, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	f000 f9d1 	bl	8004c58 <_sbrk_r>
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	d00a      	beq.n	80048d0 <sbrk_aligned+0x34>
 80048ba:	1cc4      	adds	r4, r0, #3
 80048bc:	f024 0403 	bic.w	r4, r4, #3
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d007      	beq.n	80048d4 <sbrk_aligned+0x38>
 80048c4:	1a21      	subs	r1, r4, r0
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 f9c6 	bl	8004c58 <_sbrk_r>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d101      	bne.n	80048d4 <sbrk_aligned+0x38>
 80048d0:	f04f 34ff 	mov.w	r4, #4294967295
 80048d4:	4620      	mov	r0, r4
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	200006dc 	.word	0x200006dc

080048dc <_malloc_r>:
 80048dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	1ccd      	adds	r5, r1, #3
 80048e2:	f025 0503 	bic.w	r5, r5, #3
 80048e6:	3508      	adds	r5, #8
 80048e8:	2d0c      	cmp	r5, #12
 80048ea:	bf38      	it	cc
 80048ec:	250c      	movcc	r5, #12
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	4607      	mov	r7, r0
 80048f2:	db01      	blt.n	80048f8 <_malloc_r+0x1c>
 80048f4:	42a9      	cmp	r1, r5
 80048f6:	d905      	bls.n	8004904 <_malloc_r+0x28>
 80048f8:	230c      	movs	r3, #12
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	2600      	movs	r6, #0
 80048fe:	4630      	mov	r0, r6
 8004900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004904:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049d8 <_malloc_r+0xfc>
 8004908:	f000 f868 	bl	80049dc <__malloc_lock>
 800490c:	f8d8 3000 	ldr.w	r3, [r8]
 8004910:	461c      	mov	r4, r3
 8004912:	bb5c      	cbnz	r4, 800496c <_malloc_r+0x90>
 8004914:	4629      	mov	r1, r5
 8004916:	4638      	mov	r0, r7
 8004918:	f7ff ffc0 	bl	800489c <sbrk_aligned>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	4604      	mov	r4, r0
 8004920:	d155      	bne.n	80049ce <_malloc_r+0xf2>
 8004922:	f8d8 4000 	ldr.w	r4, [r8]
 8004926:	4626      	mov	r6, r4
 8004928:	2e00      	cmp	r6, #0
 800492a:	d145      	bne.n	80049b8 <_malloc_r+0xdc>
 800492c:	2c00      	cmp	r4, #0
 800492e:	d048      	beq.n	80049c2 <_malloc_r+0xe6>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	4631      	mov	r1, r6
 8004934:	4638      	mov	r0, r7
 8004936:	eb04 0903 	add.w	r9, r4, r3
 800493a:	f000 f98d 	bl	8004c58 <_sbrk_r>
 800493e:	4581      	cmp	r9, r0
 8004940:	d13f      	bne.n	80049c2 <_malloc_r+0xe6>
 8004942:	6821      	ldr	r1, [r4, #0]
 8004944:	1a6d      	subs	r5, r5, r1
 8004946:	4629      	mov	r1, r5
 8004948:	4638      	mov	r0, r7
 800494a:	f7ff ffa7 	bl	800489c <sbrk_aligned>
 800494e:	3001      	adds	r0, #1
 8004950:	d037      	beq.n	80049c2 <_malloc_r+0xe6>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	442b      	add	r3, r5
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	f8d8 3000 	ldr.w	r3, [r8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d038      	beq.n	80049d2 <_malloc_r+0xf6>
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	42a2      	cmp	r2, r4
 8004964:	d12b      	bne.n	80049be <_malloc_r+0xe2>
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	e00f      	b.n	800498c <_malloc_r+0xb0>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	1b52      	subs	r2, r2, r5
 8004970:	d41f      	bmi.n	80049b2 <_malloc_r+0xd6>
 8004972:	2a0b      	cmp	r2, #11
 8004974:	d917      	bls.n	80049a6 <_malloc_r+0xca>
 8004976:	1961      	adds	r1, r4, r5
 8004978:	42a3      	cmp	r3, r4
 800497a:	6025      	str	r5, [r4, #0]
 800497c:	bf18      	it	ne
 800497e:	6059      	strne	r1, [r3, #4]
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	bf08      	it	eq
 8004984:	f8c8 1000 	streq.w	r1, [r8]
 8004988:	5162      	str	r2, [r4, r5]
 800498a:	604b      	str	r3, [r1, #4]
 800498c:	4638      	mov	r0, r7
 800498e:	f104 060b 	add.w	r6, r4, #11
 8004992:	f000 f829 	bl	80049e8 <__malloc_unlock>
 8004996:	f026 0607 	bic.w	r6, r6, #7
 800499a:	1d23      	adds	r3, r4, #4
 800499c:	1af2      	subs	r2, r6, r3
 800499e:	d0ae      	beq.n	80048fe <_malloc_r+0x22>
 80049a0:	1b9b      	subs	r3, r3, r6
 80049a2:	50a3      	str	r3, [r4, r2]
 80049a4:	e7ab      	b.n	80048fe <_malloc_r+0x22>
 80049a6:	42a3      	cmp	r3, r4
 80049a8:	6862      	ldr	r2, [r4, #4]
 80049aa:	d1dd      	bne.n	8004968 <_malloc_r+0x8c>
 80049ac:	f8c8 2000 	str.w	r2, [r8]
 80049b0:	e7ec      	b.n	800498c <_malloc_r+0xb0>
 80049b2:	4623      	mov	r3, r4
 80049b4:	6864      	ldr	r4, [r4, #4]
 80049b6:	e7ac      	b.n	8004912 <_malloc_r+0x36>
 80049b8:	4634      	mov	r4, r6
 80049ba:	6876      	ldr	r6, [r6, #4]
 80049bc:	e7b4      	b.n	8004928 <_malloc_r+0x4c>
 80049be:	4613      	mov	r3, r2
 80049c0:	e7cc      	b.n	800495c <_malloc_r+0x80>
 80049c2:	230c      	movs	r3, #12
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4638      	mov	r0, r7
 80049c8:	f000 f80e 	bl	80049e8 <__malloc_unlock>
 80049cc:	e797      	b.n	80048fe <_malloc_r+0x22>
 80049ce:	6025      	str	r5, [r4, #0]
 80049d0:	e7dc      	b.n	800498c <_malloc_r+0xb0>
 80049d2:	605b      	str	r3, [r3, #4]
 80049d4:	deff      	udf	#255	; 0xff
 80049d6:	bf00      	nop
 80049d8:	200006d8 	.word	0x200006d8

080049dc <__malloc_lock>:
 80049dc:	4801      	ldr	r0, [pc, #4]	; (80049e4 <__malloc_lock+0x8>)
 80049de:	f7ff bf0e 	b.w	80047fe <__retarget_lock_acquire_recursive>
 80049e2:	bf00      	nop
 80049e4:	200006d4 	.word	0x200006d4

080049e8 <__malloc_unlock>:
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <__malloc_unlock+0x8>)
 80049ea:	f7ff bf09 	b.w	8004800 <__retarget_lock_release_recursive>
 80049ee:	bf00      	nop
 80049f0:	200006d4 	.word	0x200006d4

080049f4 <__sflush_r>:
 80049f4:	898a      	ldrh	r2, [r1, #12]
 80049f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fa:	4605      	mov	r5, r0
 80049fc:	0710      	lsls	r0, r2, #28
 80049fe:	460c      	mov	r4, r1
 8004a00:	d458      	bmi.n	8004ab4 <__sflush_r+0xc0>
 8004a02:	684b      	ldr	r3, [r1, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dc05      	bgt.n	8004a14 <__sflush_r+0x20>
 8004a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	dc02      	bgt.n	8004a14 <__sflush_r+0x20>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	d0f9      	beq.n	8004a0e <__sflush_r+0x1a>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a20:	682f      	ldr	r7, [r5, #0]
 8004a22:	6a21      	ldr	r1, [r4, #32]
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	d032      	beq.n	8004a8e <__sflush_r+0x9a>
 8004a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	075a      	lsls	r2, r3, #29
 8004a2e:	d505      	bpl.n	8004a3c <__sflush_r+0x48>
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	1ac0      	subs	r0, r0, r3
 8004a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a36:	b10b      	cbz	r3, 8004a3c <__sflush_r+0x48>
 8004a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a3a:	1ac0      	subs	r0, r0, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a42:	6a21      	ldr	r1, [r4, #32]
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b0      	blx	r6
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	d106      	bne.n	8004a5c <__sflush_r+0x68>
 8004a4e:	6829      	ldr	r1, [r5, #0]
 8004a50:	291d      	cmp	r1, #29
 8004a52:	d82b      	bhi.n	8004aac <__sflush_r+0xb8>
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <__sflush_r+0x108>)
 8004a56:	410a      	asrs	r2, r1
 8004a58:	07d6      	lsls	r6, r2, #31
 8004a5a:	d427      	bmi.n	8004aac <__sflush_r+0xb8>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	6062      	str	r2, [r4, #4]
 8004a60:	04d9      	lsls	r1, r3, #19
 8004a62:	6922      	ldr	r2, [r4, #16]
 8004a64:	6022      	str	r2, [r4, #0]
 8004a66:	d504      	bpl.n	8004a72 <__sflush_r+0x7e>
 8004a68:	1c42      	adds	r2, r0, #1
 8004a6a:	d101      	bne.n	8004a70 <__sflush_r+0x7c>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b903      	cbnz	r3, 8004a72 <__sflush_r+0x7e>
 8004a70:	6560      	str	r0, [r4, #84]	; 0x54
 8004a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a74:	602f      	str	r7, [r5, #0]
 8004a76:	2900      	cmp	r1, #0
 8004a78:	d0c9      	beq.n	8004a0e <__sflush_r+0x1a>
 8004a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	d002      	beq.n	8004a88 <__sflush_r+0x94>
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7ff febe 	bl	8004804 <_free_r>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8004a8c:	e7c0      	b.n	8004a10 <__sflush_r+0x1c>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b0      	blx	r6
 8004a94:	1c41      	adds	r1, r0, #1
 8004a96:	d1c8      	bne.n	8004a2a <__sflush_r+0x36>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0c5      	beq.n	8004a2a <__sflush_r+0x36>
 8004a9e:	2b1d      	cmp	r3, #29
 8004aa0:	d001      	beq.n	8004aa6 <__sflush_r+0xb2>
 8004aa2:	2b16      	cmp	r3, #22
 8004aa4:	d101      	bne.n	8004aaa <__sflush_r+0xb6>
 8004aa6:	602f      	str	r7, [r5, #0]
 8004aa8:	e7b1      	b.n	8004a0e <__sflush_r+0x1a>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	e7ad      	b.n	8004a10 <__sflush_r+0x1c>
 8004ab4:	690f      	ldr	r7, [r1, #16]
 8004ab6:	2f00      	cmp	r7, #0
 8004ab8:	d0a9      	beq.n	8004a0e <__sflush_r+0x1a>
 8004aba:	0793      	lsls	r3, r2, #30
 8004abc:	680e      	ldr	r6, [r1, #0]
 8004abe:	bf08      	it	eq
 8004ac0:	694b      	ldreq	r3, [r1, #20]
 8004ac2:	600f      	str	r7, [r1, #0]
 8004ac4:	bf18      	it	ne
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	eba6 0807 	sub.w	r8, r6, r7
 8004acc:	608b      	str	r3, [r1, #8]
 8004ace:	f1b8 0f00 	cmp.w	r8, #0
 8004ad2:	dd9c      	ble.n	8004a0e <__sflush_r+0x1a>
 8004ad4:	6a21      	ldr	r1, [r4, #32]
 8004ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ad8:	4643      	mov	r3, r8
 8004ada:	463a      	mov	r2, r7
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b0      	blx	r6
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	dc06      	bgt.n	8004af2 <__sflush_r+0xfe>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	e78e      	b.n	8004a10 <__sflush_r+0x1c>
 8004af2:	4407      	add	r7, r0
 8004af4:	eba8 0800 	sub.w	r8, r8, r0
 8004af8:	e7e9      	b.n	8004ace <__sflush_r+0xda>
 8004afa:	bf00      	nop
 8004afc:	dfbffffe 	.word	0xdfbffffe

08004b00 <_fflush_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	690b      	ldr	r3, [r1, #16]
 8004b04:	4605      	mov	r5, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	b913      	cbnz	r3, 8004b10 <_fflush_r+0x10>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	b118      	cbz	r0, 8004b1a <_fflush_r+0x1a>
 8004b12:	6a03      	ldr	r3, [r0, #32]
 8004b14:	b90b      	cbnz	r3, 8004b1a <_fflush_r+0x1a>
 8004b16:	f7ff fc7f 	bl	8004418 <__sinit>
 8004b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f3      	beq.n	8004b0a <_fflush_r+0xa>
 8004b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b24:	07d0      	lsls	r0, r2, #31
 8004b26:	d404      	bmi.n	8004b32 <_fflush_r+0x32>
 8004b28:	0599      	lsls	r1, r3, #22
 8004b2a:	d402      	bmi.n	8004b32 <_fflush_r+0x32>
 8004b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2e:	f7ff fe66 	bl	80047fe <__retarget_lock_acquire_recursive>
 8004b32:	4628      	mov	r0, r5
 8004b34:	4621      	mov	r1, r4
 8004b36:	f7ff ff5d 	bl	80049f4 <__sflush_r>
 8004b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b3c:	07da      	lsls	r2, r3, #31
 8004b3e:	4605      	mov	r5, r0
 8004b40:	d4e4      	bmi.n	8004b0c <_fflush_r+0xc>
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	059b      	lsls	r3, r3, #22
 8004b46:	d4e1      	bmi.n	8004b0c <_fflush_r+0xc>
 8004b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4a:	f7ff fe59 	bl	8004800 <__retarget_lock_release_recursive>
 8004b4e:	e7dd      	b.n	8004b0c <_fflush_r+0xc>

08004b50 <__swhatbuf_r>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	460c      	mov	r4, r1
 8004b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	b096      	sub	sp, #88	; 0x58
 8004b5c:	4615      	mov	r5, r2
 8004b5e:	461e      	mov	r6, r3
 8004b60:	da0d      	bge.n	8004b7e <__swhatbuf_r+0x2e>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b68:	f04f 0100 	mov.w	r1, #0
 8004b6c:	bf0c      	ite	eq
 8004b6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b72:	2340      	movne	r3, #64	; 0x40
 8004b74:	2000      	movs	r0, #0
 8004b76:	6031      	str	r1, [r6, #0]
 8004b78:	602b      	str	r3, [r5, #0]
 8004b7a:	b016      	add	sp, #88	; 0x58
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
 8004b7e:	466a      	mov	r2, sp
 8004b80:	f000 f848 	bl	8004c14 <_fstat_r>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	dbec      	blt.n	8004b62 <__swhatbuf_r+0x12>
 8004b88:	9901      	ldr	r1, [sp, #4]
 8004b8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b92:	4259      	negs	r1, r3
 8004b94:	4159      	adcs	r1, r3
 8004b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b9a:	e7eb      	b.n	8004b74 <__swhatbuf_r+0x24>

08004b9c <__smakebuf_r>:
 8004b9c:	898b      	ldrh	r3, [r1, #12]
 8004b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ba0:	079d      	lsls	r5, r3, #30
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	d507      	bpl.n	8004bb8 <__smakebuf_r+0x1c>
 8004ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	6163      	str	r3, [r4, #20]
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	ab01      	add	r3, sp, #4
 8004bba:	466a      	mov	r2, sp
 8004bbc:	f7ff ffc8 	bl	8004b50 <__swhatbuf_r>
 8004bc0:	9900      	ldr	r1, [sp, #0]
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f7ff fe89 	bl	80048dc <_malloc_r>
 8004bca:	b948      	cbnz	r0, 8004be0 <__smakebuf_r+0x44>
 8004bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bd0:	059a      	lsls	r2, r3, #22
 8004bd2:	d4ef      	bmi.n	8004bb4 <__smakebuf_r+0x18>
 8004bd4:	f023 0303 	bic.w	r3, r3, #3
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	e7e3      	b.n	8004ba8 <__smakebuf_r+0xc>
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	6020      	str	r0, [r4, #0]
 8004be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	9b00      	ldr	r3, [sp, #0]
 8004bec:	6163      	str	r3, [r4, #20]
 8004bee:	9b01      	ldr	r3, [sp, #4]
 8004bf0:	6120      	str	r0, [r4, #16]
 8004bf2:	b15b      	cbz	r3, 8004c0c <__smakebuf_r+0x70>
 8004bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 f81d 	bl	8004c38 <_isatty_r>
 8004bfe:	b128      	cbz	r0, 8004c0c <__smakebuf_r+0x70>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	431d      	orrs	r5, r3
 8004c10:	81a5      	strh	r5, [r4, #12]
 8004c12:	e7cf      	b.n	8004bb4 <__smakebuf_r+0x18>

08004c14 <_fstat_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d07      	ldr	r5, [pc, #28]	; (8004c34 <_fstat_r+0x20>)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	f7fb ff58 	bl	8000ad6 <_fstat>
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	d102      	bne.n	8004c30 <_fstat_r+0x1c>
 8004c2a:	682b      	ldr	r3, [r5, #0]
 8004c2c:	b103      	cbz	r3, 8004c30 <_fstat_r+0x1c>
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	bd38      	pop	{r3, r4, r5, pc}
 8004c32:	bf00      	nop
 8004c34:	200006d0 	.word	0x200006d0

08004c38 <_isatty_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d06      	ldr	r5, [pc, #24]	; (8004c54 <_isatty_r+0x1c>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fb ff57 	bl	8000af6 <_isatty>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_isatty_r+0x1a>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_isatty_r+0x1a>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	200006d0 	.word	0x200006d0

08004c58 <_sbrk_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d06      	ldr	r5, [pc, #24]	; (8004c74 <_sbrk_r+0x1c>)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	f7fb ff60 	bl	8000b28 <_sbrk>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_sbrk_r+0x1a>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_sbrk_r+0x1a>
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	200006d0 	.word	0x200006d0

08004c78 <_init>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr

08004c84 <_fini>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	bf00      	nop
 8004c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8a:	bc08      	pop	{r3}
 8004c8c:	469e      	mov	lr, r3
 8004c8e:	4770      	bx	lr
